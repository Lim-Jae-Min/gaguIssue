<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ko.gagu.issue.dao.DocumentDAO">
	<!-- [jeong] 문서 양식 번호를 입력하면 해당 양식의 파일 경로를 조회 -->
	<select id="getFormSrc" resultType="String">
		SELECT file_name AS fileName FROM filestore_tb ft WHERE idx_filetype = 5 AND idx_ref = #{form_name};
	</select>
	
	<!-- [jeong] 임시로 직원의 정보를 불러옴 무조건 지워야함!!! -->
	<select id="getEmployeeInfo" resultType="employee">
		SELECT 
			*,
			(SELECT de_name FROM department_tb d WHERE d.idx_department = e.idx_department) AS de_name,
			(SELECT title_name FROM title_tb t WHERE t.idx_title = e.idx_title) AS title_name
		FROM employee_tb e WHERE idx_employee = #{idx_employee}
	</select>
	
	<!-- [jeong] 문서의 작성자와 양식 번호 내용을 approval 테이블에 저장 -->
	<insert id="saveDocument" useGeneratedKeys="true"
		keyColumn="idx_approval"
		keyProperty="idx_approval"
		parameterType="document">
		INSERT INTO approval_tb (idx_employee, idx_dc, ap_content, ap_title) 
			VALUES (#{idx_employee}, #{idx_dc}, #{ap_content}, #{ap_title})
	</insert>
	
	<!-- [jeong] 작성한 문서의 첨부파일을 파일 저장소에 저장함 -->
	<insert id="saveAttachmentFile">
		INSERT INTO filestore_tb (idx_filetype, idx_ref, origin_name, file_name)
			VALUES (#{idx_filetype}, #{idx_ref}, #{origin_name}, #{file_name})
	</insert>	

	<!-- [jeong] 문서의 작성자와 양식 번호 내용을 approval 테이블에 저장 -->
	<insert id="saveApprovalLine">
		INSERT INTO approval_line_tb (idx_approval, idx_employee, ap_step, is_approval) 
			VALUES (#{idx_approval}, #{idx_employee}, #{ap_step}, -1)
	</insert>
	
	<!-- [jeong] 작성한 문서의 파일 이름을 filestore 테이블에 저장 -->
	<insert id="saveDocumentFile">
		INSERT INTO filestore_tb (idx_filetype, idx_ref, file_name)
			VALUES (#{idx_filetype}, #{idx_ref}, #{file_name})
	</insert>

	<!-- [jeong] 결재권자가 승인 처리시 서명한 이미지 filestore 에 저장 -->
	<insert id="saveSignImage">
		INSERT INTO filestore_tb (idx_filetype, idx_ref, file_name)
			VALUES (#{idxFiletype}, #{idxApprovalLine}, #{signImageName})
	</insert>
	
	<!-- [jeong] jstree 에서 사용할 조직도를 조회 -->
	<select id="getOrganization" resultType="map">
		SELECT 
		    'employee' AS type,
		    et.idx_employee AS id, 
		    CASE 
		        WHEN root.de_name IS NULL THEN 'gaguissue'
		        ELSE node.de_name 
		    END AS parent, 
		    CONCAT(tt.title_name, '|', et.emp_name) AS text,
		    et.emp_name AS name,
		    node.de_name AS department, 
		    tt.title_name AS title
		FROM employee_tb et 
		JOIN organization_tb ot ON et.idx_department = ot.depart_idx
		JOIN department_tb node ON node.idx_department = ot.depart_idx 
		LEFT JOIN department_tb root ON root.idx_department = ot.root_depart_idx
		JOIN title_tb tt ON tt.idx_title = et.idx_title
			UNION ALL
		SELECT 
		    'department' AS type,
		    dt.de_name AS id, 
		    'gaguissue' AS parent, 
		    dt.de_name AS text,
		    NULL AS name,
		    NULL AS department,   
		    NULL AS title         
		FROM department_tb dt 
		WHERE dt.idx_department IN (2,3,4)
	</select>
	
	<!-- [jeong] 해당 문서에 접근할 권한(작성자, 결재권자, 부서원)이 무엇인지 그리고 결재 순서가 몇번인지 알려줌 -->
	<select id="getApprovalPermission" resultType="approval">
		SELECT
			att.idx_approval AS idxApproval,
			att.idx_employee AS idxEmployee,
			(SELECT emp_name FROM employee_tb WHERE idx_employee = att.idx_employee) AS empName,
			att.idx_dc AS idxDc,
			att.final_ap_status AS finalApStatus,
			att.ap_content AS apContent,
			att.written_datetime AS writtenDatetime,
			et.idx_employee AS accessIdxEmployee,
			CASE
				WHEN et.idx_employee = att.idx_employee THEN '작성자'
				WHEN alt.idx_employee IS NOT NULL THEN '결재권자'
				WHEN et.idx_department = (SELECT idx_department FROM employee_tb WHERE idx_employee = att.idx_employee) IS NOT NULL THEN '같은부서원'
				ELSE '접근불가'
			END AS accessPermission,
			CASE 
				WHEN alt.idx_employee IS NOT NULL THEN alt.ap_step
				ELSE NULL
			END AS approvalStep
		FROM approval_tb att
			LEFT JOIN employee_tb et ON et.idx_employee = #{accessIdxEmployee}
			LEFT JOIN approval_line_tb alt ON alt.idx_approval = att.idx_approval AND alt.idx_employee = et.idx_employee
		WHERE att.idx_approval = #{idxApproval}
	</select>	
	
	<!-- [jeong] 해당 문서의 관련된 모든파일(문서, 첨부파일)들을 가져옴 -->
	<select id="getDocumentFiles">
		SELECT 
			ft.idx_file AS idxFile,
			ft.idx_filetype AS idxFiletype,
			ft.upload_datetime AS uploadDatetime,
			ft.origin_name AS originName,
			ft.file_name AS fileName
		FROM filestore_tb ft 
		WHERE ft.idx_ref = #{idxApproval} AND (ft.idx_filetype = 4 OR ft.idx_filetype = 8)
	</select>

	<select id="getApproval" resultType="ko.gagu.issue.dto.ApprovalDTO">
		SELECT 
			idx_approval AS idxApproval,
			idx_employee AS idxEmployee,
			idx_dc AS idxDc,
			final_ap_status AS finalApStatus,
			written_datetime AS writtenDatetime,
			ap_content AS apContent,
			ap_title AS apTitle 
		FROM approval_tb WHERE idx_approval = #{idxApproval}
	</select>
	
	<!-- [jeong] 해당 문서의 결재 라인의 데이터를 가져옴 -->
	<select id="getApprovalLineList">
		SELECT
			alt.idx_approval_line AS idxApprovalLine,
			alt.idx_approval AS idxApproval,	
			alt.idx_employee AS idxEmployee,
			tt.title_name AS titleName,
			dt.de_name AS departmentName,
			alt.ap_step AS apStep,
			alt.is_approval AS isApproval,
			alt.ap_comment AS apComment,
			DATE_FORMAT(alt.approval_datetime, '%Y/%m/%d %H:%i') AS approvalDatetimeS,
			CASE 
				WHEN EXISTS (SELECT 1 FROM approval_line_tb WHERE is_approval = 0 AND idx_approval = #{idxApproval}) THEN -1
				ELSE (SELECT SUM(is_approval) FROM approval_line_tb WHERE idx_approval = #{idxApproval} AND is_approval = 1)
			END AS currentApprovalStep,
			(SELECT file_name FROM filestore_tb ft WHERE ft.idx_filetype = 9 AND ft.idx_ref = alt.idx_approval_line) AS signatureFilePath
		FROM (SELECT * FROM approval_line_tb WHERE idx_approval = #{idxApproval}) alt
		JOIN employee_tb et ON et.idx_employee = alt.idx_employee
		JOIN title_tb tt ON tt.idx_title = et.idx_title 
		JOIN department_tb dt ON dt.idx_department = et.idx_department
		ORDER BY alt.ap_step
	</select>

	<select id="fetchDocumentList" resultType="document">
		select  
			at.ap_title,
			at.idx_employee,
			at.idx_approval,
			dct.dc_name,
			et.emp_name,
			dt.de_name,
			at.final_ap_status,
			DATE_FORMAT(at.written_datetime, '%Y/%m/%d %H:%i') AS written_datetime
		from approval_tb `at`
		join document_category_tb dct ON dct.idx_dc = at.idx_dc
		join employee_tb et ON et.idx_employee = at.idx_employee
		join department_tb dt ON dt.idx_department = et.idx_department
		where
			at.idx_employee = #{idxEmployee}
			or EXISTS (SELECT 1 FROM approval_line_tb alt WHERE at.idx_approval = alt.idx_approval AND alt.idx_employee = #{idxEmployee})
			or et.idx_department = (SELECT idx_department FROM employee_tb WHERE idx_employee = #{idxEmployee})
		order by at.written_datetime desc
		limit 0, 12
	</select>
	
	<select id="fetchFilterDocumentList" resultType="document">
		select  
			at.ap_title,
			at.idx_employee,
			at.idx_approval,
			dct.dc_name,
			et.emp_name,
			dt.de_name,
			at.final_ap_status,
			DATE_FORMAT(at.written_datetime, '%Y/%m/%d %H:%i') AS written_datetime
		from approval_tb `at`
		join document_category_tb dct ON dct.idx_dc = at.idx_dc
		join employee_tb et ON et.idx_employee = at.idx_employee
		join department_tb dt ON dt.idx_department = et.idx_department
		where
			1 = 1 
	    <if test="paging.startDate != null and !paging.startDate.equals('')">
	    	AND STR_TO_DATE(CONCAT(#{paging.startDate}, '00:00:00.000'), '%Y-%m-%d %T.%f') &lt;= at.written_datetime
	    </if>
	    <if test="paging.endDate != null and !paging.endDate.equals('')">
	    	AND STR_TO_DATE(CONCAT(#{paging.endDate}, '23:59:59.999'), '%Y-%m-%d %T.%f') &gt;= at.written_datetime
	    </if>		
	    <if test="paging.searchKeyword != null and !paging.searchKeyword.equals('')">
	    	AND (at.ap_title LIKE CONCAT('%', #{paging.searchKeyword}, '%') 
	    		OR et.emp_name LIKE CONCAT('%', #{paging.searchKeyword}, '%'))
	    </if>
	    <choose>
		    <when test="paging.filter != null and paging.filter.equals('pending')">
		    	AND at.idx_approval IN (SELECT idx_approval FROM approval_line_tb WHERE idx_employee = #{idxEmployee} and is_approval = -1)  
		    </when>
		    <when test="paging.filter != null and paging.filter.equals('rejected')">
		    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '반려'
		    </when>
		    <when test="paging.filter != null and paging.filter.equals('approved')">
		    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '승인'
		    </when>
		    <when test="paging.filter != null and paging.filter.equals('retracted')">
		    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '회수'
		    </when>				        		    		    
		    <otherwise>
		    	AND (et.idx_department = (SELECT idx_department FROM employee_tb WHERE idx_employee = #{idxEmployee})
		    	OR at.idx_employee = #{idxEmployee}
				OR EXISTS (SELECT 1 FROM approval_line_tb alt WHERE at.idx_approval = alt.idx_approval AND alt.idx_employee = #{idxEmployee}))
		    </otherwise>
	    </choose>		
		order by at.written_datetime desc
		limit ${(paging.page - 1) * 12}, 12
	</select>
	
	<update id="approvalLine">
		UPDATE approval_line_tb SET is_approval = 1, approval_datetime = current_timestamp()
			WHERE idx_approval = #{idxApproval} AND idx_approval_line = #{idxApprovalLine}
	</update>
	
	<update id="approval">
		UPDATE approval_tb SET final_ap_status = '승인' WHERE idx_approval = #{idxApproval}
	</update>
	
	<update id="rejectLine">
		UPDATE approval_line_tb SET is_approval = 0, approval_datetime = current_timestamp(), ap_comment = #{apComment}
			WHERE idx_approval = #{idxApproval} AND idx_approval_line = #{idxApprovalLine}
	</update>
	
	<update id="reject">
		UPDATE approval_tb SET final_ap_status = '반려' WHERE idx_approval = #{idxApproval}
	</update>
	
	<update id="retract">
		UPDATE approval_tb SET final_ap_status = '회수' WHERE idx_approval = #{idxApproval}
	</update>
	
	<insert id="insertLeave">
		INSERT INTO leave_usage_tb (idx_employee, lu_usage_days, lu_start_date, lu_end_date) 
			VALUES (#{idxEmployee}, #{days}, #{startDate}, #{endDate})
	</insert>
	
	<insert id="insertLeaveAccruals">
		INSERT INTO leave_accruals_tb (idx_employee, leave_days, usage_days)
			VALUES (#{idxEmployee}, 15, 0)
	</insert>
	
	<select id="isLeaveAccruals" resultType="integer">
		SELECT COUNT(*) FROM leave_accruals_tb WHERE idx_employee = #{idxEmployee}
	</select>
	
	<update id="updateLeaveAccruals">
		UPDATE leave_accruals_tb SET leave_days = leave_days - #{days}
			,usage_days = usage_days + #{days} 
			,accrual_date = CURRENT_TIMESTAMP() 
		WHERE idx_employee = #{idxEmployee}
	</update>
	
	<select id="getAllTotalPages" resultType="integer">
		select  
			ceil(count(*) / 12)
		from approval_tb `at`
		join document_category_tb dct ON dct.idx_dc = at.idx_dc
		join employee_tb et ON et.idx_employee = at.idx_employee
		join department_tb dt ON dt.idx_department = et.idx_department
		where
			at.idx_employee = #{idxEmployee}
			or EXISTS (SELECT 1 FROM approval_line_tb alt WHERE at.idx_approval = alt.idx_approval AND alt.idx_employee = #{idxEmployee})
			or et.idx_department = (SELECT idx_department FROM employee_tb WHERE idx_employee = #{idxEmployee})
	</select>
	
	<select id="getFilterTotalPages" resultType="integer">
		select  
			ceil(count(*) / 12)
		from approval_tb `at`
		join document_category_tb dct ON dct.idx_dc = at.idx_dc
		join employee_tb et ON et.idx_employee = at.idx_employee
		join department_tb dt ON dt.idx_department = et.idx_department
		where
			1 = 1
	    <if test="paging.startDate != null and !paging.startDate.equals('')">
	    	AND STR_TO_DATE(CONCAT(#{paging.startDate}, '00:00:00.000'), '%Y-%m-%d %T.%f') &lt;= at.written_datetime
	    </if>
	    <if test="paging.endDate != null and !paging.endDate.equals('')">
	    	AND STR_TO_DATE(CONCAT(#{paging.endDate}, '23:59:59.999'), '%Y-%m-%d %T.%f') &gt;= at.written_datetime
	    </if>		
	    <if test="paging.searchKeyword != null and !paging.searchKeyword.equals('')">
	    	AND (at.ap_title LIKE CONCAT('%', #{paging.searchKeyword}, '%') 
	    		OR et.emp_name LIKE CONCAT('%', #{paging.searchKeyword}, '%'))
	    </if>	    	
	    <choose>
		    <when test="paging.filter != null and paging.filter.equals('pending')">
		    	AND at.idx_approval IN (SELECT idx_approval FROM approval_line_tb WHERE idx_employee = #{idxEmployee} and is_approval = -1)  
		    </when>
		    <when test="paging.filter != null and paging.filter.equals('rejected')">
		    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '반려'
		    </when>
		    <when test="paging.filter != null and paging.filter.equals('approved')">
		    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '승인'
		    </when>
		    <when test="paging.filter != null and paging.filter.equals('retracted')">
		    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '회수'
		    </when>			    
		    <otherwise>
		    	AND (et.idx_department = (SELECT idx_department FROM employee_tb WHERE idx_employee = #{idxEmployee})
		    	OR at.idx_employee = #{idxEmployee}
				OR EXISTS (SELECT 1 FROM approval_line_tb alt WHERE at.idx_approval = alt.idx_approval AND alt.idx_employee = #{idxEmployee}))
		    </otherwise>
	    </choose>
	</select>	
	
	<insert id="insertAlarm">
		INSERT INTO alerm_tb (idx_employee, al_content, al_path)
			VALUES (idxEmployee, alarmMsg, alarmPath)
	</insert>
</mapper>
