<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="ko.gagu.issue.dao.EmployeeDAO">
	
	<select id="employeeGetAllEvents" resultType="employee">
		SELECT * FROM employee_calendar_tb WHERE idx_employee=#{param1} and ec_status='SHOW'
	</select>
	
	<select id="getEmployeeAttendance" resultType="employee">
		SELECT * FROM attendance_history_tb aht WHERE idx_employee=#{param1}
	</select>
	
	<select id="getAllCompanyEvents" resultType="HRDept">
		SELECT * FROM company_calendar_tb WHERE cc_status='SHOW'
	</select>
	
	<select id="isAdmin" resultType="int">
		SELECT COUNT(*) FROM emloyee_tb
		WHERE idx_employee=#{param1} AND idx_title IN (4, 3, 2, 1);
	</select>
	
	<!-- [il] 임의로 idx_employee =1 집어넣었음 나중에 바꿔줘야함!! -->
	<insert id="employeeAddEvent" parameterType="employee">
		INSERT INTO employee_calendar_tb
			(idx_employee,ec_title,ec_description,ec_start_datetime,ec_end_datetime,ec_color)
		VALUES (#{idx_employee},#{ec_title},#{ec_description},#{ec_start_datetime},#{ec_end_datetime},'#7a70ba')
	</insert>
	
	<update id="employeeDeleteEvent">
		UPDATE employee_calendar_tb SET ec_status='BLIND' WHERE idx_emp_calendar=#{param1} and idx_employee=#{param2}
	</update>
	
	<update id="employeeUpdateEvent">
		UPDATE employee_calendar_tb SET
			ec_title=#{param3},
			ec_start_datetime=#{param4},
			ec_end_datetime=#{param5},
			ec_description=#{param6},
			ec_color=#{param7}
		WHERE idx_emp_calendar=#{param1} AND idx_employee=#{param2}
	</update>
	
	<select id="login" resultType="String">
		SELECT emp_pw FROM employee_tb WHERE emp_id = #{param1}
	</select>
	
	<insert id="join" parameterType="map">
		INSERT INTO employee_tb (idx_department,idx_title,emp_id,emp_pw,emp_name,emp_email,emp_email_pw,emp_phone_number,emp_birth_date,emp_address)
			VALUES (#{idx_department},#{idx_title},#{emp_id},#{emp_pw},#{emp_name},#{emp_email},#{emp_email_pw},#{emp_phone_number},#{emp_birth_date},#{emp_address})
	</insert>
	
	 <select id="findEmployeeNumber" parameterType="map" resultType="string">
        SELECT emp_id
        FROM employee_tb
        WHERE emp_name = #{emp_name}
          AND emp_birth_date = #{birthDate}
    </select>
    
    <select id="findPW" parameterType="map" resultType="string">
		SELECT emp_pw
		FROM employee_tb
		WHERE emp_id = #{emp_id}
		AND emp_name = #{emp_name}
		AND emp_birth_date = #{birthDate}
    </select>
	
	<select id="getContact" resultType="employee">
		        
        SELECT et.idx_employee, et.emp_name, dt.de_name, et.emp_email, et.emp_phone_number, et.emp_address, et.idx_title, p.file_name
		FROM employee_tb et
		JOIN department_tb dt
		ON et.idx_department = dt.idx_department 
		LEFT JOIN (SELECT ft.idx_ref, ft.file_name FROM filestore_tb ft WHERE ft.idx_filetype = 1) AS p ON et.idx_employee = p.idx_ref
		WHERE idx_employee != #{param1}
		<if test="param2 != null and param2 != '' and param2 != '전체'">
           	AND (et.emp_name LIKE CONCAT('%', #{param2}, '%') OR et.idx_title LIKE CONCAT('%', #{param2}, '%'))
        </if>
		
	</select>
	
	<select id="getempDetail" parameterType="map">
	
		SELECT et.idx_employee ,tt.title_name, et.emp_name, dt.de_name, et.emp_email, et.emp_phone_number, et.emp_address, et.idx_title , p.file_name
		FROM employee_tb et
		JOIN department_tb dt ON et.idx_department = dt.idx_department 
		JOIN title_tb tt ON et.idx_title = tt.idx_title
		LEFT JOIN (SELECT ft.idx_ref, ft.file_name FROM filestore_tb ft WHERE ft.idx_filetype = 1) AS p ON et.idx_employee = p.idx_ref
		WHERE idx_employee = #{idx_emp}
	
	</select>
	
	<select id="getEmpIdx" resultType="Integer">
		SELECT et.idx_employee
        FROM employee_tb et 
        WHERE emp_id = #{param1};
	</select>
	
	
	<!-- [do] 로그인 인터셉터 관련 -->
	<select id="employeeData" resultType="employee">
		SELECT et.idx_employee,
				et.emp_id ,
				et.emp_pw ,
				et.emp_name ,
				et.idx_department ,
				dt.de_name,
				et.idx_title ,
				tt.title_name ,
				et.emp_address ,
				et.emp_birth_date ,
				et.emp_email ,
				et.emp_email_pw ,
				et.emp_hire_date ,
				et.emp_phone_number ,
				et.emp_status ,
				et.emp_term_date ,
				et.first_login
		FROM employee_tb et
			JOIN department_tb dt ON et.idx_department = dt.idx_department 
			JOIN title_tb tt ON et.idx_title = tt.idx_title 
		WHERE emp_id = #{param1}
	</select>
	
	
	<select id="getSalesHistoryTotalPages" resultType="integer">
		SELECT
			CEIL(count(*) / 13)
		FROM sales_history_tb sht
		WHERE 1 = 1
		<if test="startDate != null and !startDate.equals('')">
			AND STR_TO_DATE(CONCAT(#{startDate}, '00:00:00.000'), '%Y-%m-%d %T.%f') &lt;= sht.transaction_datetime
		</if>
		<if test="endDate != null and !endDate.equals('')">
			AND STR_TO_DATE(CONCAT(#{endDate}, '23:59:59.999'), '%Y-%m-%d %T.%f') &gt;= sht.transaction_datetime
		</if>
		<if test="searchKeyword != null and !searchKeyword.equals('')">
			<choose>
				<when test="searchOption != null and searchOption.equals('product')">
					AND sht.product_name LIKE CONCAT('%', #{searchKeyword}, '%') 
				</when>
				<when test="searchOption != null and searchOption.equals('businessPartner')">
					AND sht.customer_name LIKE CONCAT('%', #{searchKeyword}, '%') 
				</when>
			</choose>
		</if>
	    <choose>
		    <when test="filter != null and filter.equals('purchaseOrder')">
		    	AND transaction_type = '발주'
		    </when>
		    <when test="filter != null and filter.equals('order')">
		    	AND transaction_type = '주문'
		    </when>		    
		</choose>	
	</select>
	
	<select id="getSalesHistory" resultType="salesData">
		SELECT
			sht.product_name AS productName,
			sht.transaction_id AS transactionId,
			sht.transaction_type AS transactionType,
			sht.customer_name AS customerName,
		    CONCAT(FORMAT(sht.transaction_amount, 0), '원') AS transactionAmount,
		    CONCAT(FORMAT(sht.cost, 0), '원') AS cost,
		    sht.remarks AS remarks,
		    DATE_FORMAT(sht.transaction_datetime, '%Y/%m/%d') AS transactionDatetime
		FROM sales_history_tb sht
		WHERE 1 = 1
		<if test="startDate != null and !startDate.equals('')">
			AND STR_TO_DATE(CONCAT(#{startDate}, '00:00:00.000'), '%Y-%m-%d %T.%f') &lt;= sht.transaction_datetime
		</if>
		<if test="endDate != null and !endDate.equals('')">
			AND STR_TO_DATE(CONCAT(#{endDate}, '23:59:59.999'), '%Y-%m-%d %T.%f') &gt;= sht.transaction_datetime
		</if>
		<choose>
			<when test="searchOption != null and searchOption.equals('product')">
				AND sht.product_name LIKE CONCAT('%', #{searchKeyword}, '%') 
			</when>
			<when test="searchOption != null and searchOption.equals('businessPartner')">
				AND sht.customer_name LIKE CONCAT('%', #{searchKeyword}, '%') 
			</when>
		</choose>
	    <choose>
		    <when test="filter != null and filter.equals('purchaseOrder')">
		    	AND transaction_type = '발주'
		    </when>
		    <when test="filter != null and filter.equals('order')">
		    	AND transaction_type = '주문'
		    </when>		    
		</choose>
		<choose>
			<when test="sortOption != null and sortOption.equals('new')">
				ORDER BY transaction_datetime DESC
			</when>
			<when test="sortOption != null and sortOption.equals('name')">
				ORDER BY product_name
			</when>
			<otherwise>
				ORDER BY transaction_datetime DESC
			</otherwise>
		</choose>	
		LIMIT ${(page - 1) * 13}, 13			
	</select>

</mapper>
