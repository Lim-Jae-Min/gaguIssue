<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="ko.gagu.issue.dao.EmployeeDAO">
	
	<select id="employeeGetAllEvents" resultType="employee">
		SELECT * FROM employee_calendar_tb WHERE idx_employee=#{param1} and ec_status='SHOW'
	</select>
	
	<select id="getEmployeeAttendance" resultType="employee">
		SELECT 
	        ah.idx_attendance,
	        ah.idx_employee,
	        ah.ah_date,
	        ah.ah_check_in,
	        ah.ah_check_out,
	        ah.ah_status,
	        et.idx_title
	    FROM attendance_history_tb ah
	    JOIN employee_tb et ON ah.idx_employee = et.idx_employee
	    WHERE ah.idx_employee = #{param1}
	</select>
	
	<select id="getEmployeeTitle" resultType="int">
		SELECT et.idx_title FROM employee_tb et 
		WHERE et.idx_employee =#{param1}
	</select>
	
	<select id="getAllCompanyEvents" resultType="HRDept">
		SELECT * FROM company_calendar_tb WHERE cc_status='SHOW'
	</select>
	
	<select id="getDepartmentIdxByEmployee" resultType="int">
		SELECT idx_department FROM employee_tb WHERE idx_employee=#{param1}
	</select>
	
	<select id="getAttendanceByDepartment" resultType="employee">
		SELECT
			ah.idx_attendance,
	        ah.idx_employee,
	        ah.ah_date,
	        ah.ah_check_in,
	        ah.ah_check_out,
	        ah.ah_status,
	        et.idx_department,
	        et.idx_employee
	    FROM attendance_history_tb ah
	    JOIN employee_tb et ON ah.idx_employee = et.idx_employee
	    WHERE idx_department = #{param1}
	</select>
	
	<select id="departmentAttendanceList" resultType="employee">
		SELECT
			ah.idx_attendance,
	        ah.idx_employee,
	        ah.ah_date,
	        ah.ah_check_in,
	        ah.ah_check_out,
	        ah.ah_status,
	        et.idx_department,
	        et.emp_name,
	        et.emp_status
		FROM attendance_history_tb ah
	    JOIN employee_tb et ON ah.idx_employee = et.idx_employee
	    WHERE et.idx_department = #{param2} AND ah.ah_date=#{param3} AND et.emp_status='재직'
	    LIMIT 15 OFFSET #{param4}
	</select>
	
	<select id="allCountPage" resultType="Object">
		SELECT CEIL(COUNT(ah.idx_attendance) / #{param3}) AS pages
		FROM attendance_history_tb ah
		WHERE ah.ah_date=#{param2}
		ORDER BY ah.idx_employee DESC
	</select>
	
	
	<!-- [il] 임의로 idx_employee =1 집어넣었음 나중에 바꿔줘야함!! -->
	<insert id="employeeAddEvent" parameterType="employee">
		INSERT INTO employee_calendar_tb
			(idx_employee,ec_title,ec_description,ec_start_datetime,ec_end_datetime,ec_color)
		VALUES (#{idx_employee},#{ec_title},#{ec_description},#{ec_start_datetime},#{ec_end_datetime},'#7a70ba')
	</insert>
	
	<update id="employeeDeleteEvent">
		UPDATE employee_calendar_tb SET ec_status='BLIND' WHERE idx_emp_calendar=#{param1} and idx_employee=#{param2}
	</update>
	
	<update id="employeeUpdateEvent">
		UPDATE employee_calendar_tb SET
			ec_title=#{param3},
			ec_start_datetime=#{param4},
			ec_end_datetime=#{param5},
			ec_description=#{param6},
			ec_color=#{param7}
		WHERE idx_emp_calendar=#{param1} AND idx_employee=#{param2}
	</update>
	
	<select id="login" resultType="String">
		SELECT emp_pw FROM employee_tb WHERE emp_id = #{param1}
	</select>
	
	<insert id="join" parameterType="map">
		INSERT INTO employee_tb (idx_department,idx_title,emp_id,emp_pw,emp_name,emp_email,emp_email_pw,emp_phone_number,emp_birth_date,emp_address)
			VALUES (#{idx_department},#{idx_title},#{emp_id},#{emp_pw},#{emp_name},#{emp_email},#{emp_email_pw},#{emp_phone_number},#{emp_birth_date},#{emp_address})
	</insert>
	
	 <select id="findEmployeeNumber" parameterType="map" resultType="string">
        SELECT emp_id
        FROM employee_tb
        WHERE emp_name = #{emp_name}
          AND emp_birth_date = #{birthDate}
    </select>
    
    <select id="findPW" parameterType="map" resultType="string">
		SELECT emp_pw
		FROM employee_tb
		WHERE emp_id = #{emp_id}
		AND emp_name = #{emp_name}
		AND emp_birth_date = #{birthDate}
    </select>
	
	<select id="getContact" resultType="employee">
		        
        SELECT et.idx_employee, et.emp_name, dt.de_name, et.emp_email, et.emp_phone_number, et.emp_address, et.idx_title, p.file_name
		FROM employee_tb et
		JOIN department_tb dt
		ON et.idx_department = dt.idx_department 
		LEFT JOIN (SELECT ft.idx_ref, ft.file_name FROM filestore_tb ft WHERE ft.idx_filetype = 1) AS p ON et.idx_employee = p.idx_ref
		WHERE idx_employee != #{param1}
		<if test="param2 != null and param2 != '' and param2 != '전체'">
           	AND (et.emp_name LIKE CONCAT('%', #{param2}, '%') OR et.idx_title LIKE CONCAT('%', #{param2}, '%'))
        </if>
		
	</select>
	
	<select id="getempDetail" parameterType="map">
	
		SELECT et.idx_employee ,tt.title_name, et.emp_name, dt.de_name, et.emp_email, et.emp_phone_number, et.emp_address, et.idx_title , p.file_name
		FROM employee_tb et
		JOIN department_tb dt ON et.idx_department = dt.idx_department 
		JOIN title_tb tt ON et.idx_title = tt.idx_title
		LEFT JOIN (SELECT ft.idx_ref, ft.file_name FROM filestore_tb ft WHERE ft.idx_filetype = 1) AS p ON et.idx_employee = p.idx_ref
		WHERE idx_employee = #{idx_emp}
	
	</select>
	
	<select id="getEmpIdx" resultType="Integer">
		SELECT et.idx_employee
        FROM employee_tb et 
        WHERE emp_id = #{param1};
	</select>
	
	
	<!-- [do] 로그인 인터셉터 관련 -->
	<select id="employeeData" resultType="employee">
		SELECT et.idx_employee,
				et.emp_id ,
				et.emp_pw ,
				et.emp_name ,
				et.idx_department ,
				dt.de_name,
				et.idx_title ,
				tt.title_name ,
				et.emp_address ,
				et.emp_birth_date ,
				et.emp_email ,
				et.emp_email_pw ,
				et.emp_hire_date ,
				et.emp_phone_number ,
				et.emp_status ,
				et.emp_term_date ,
				et.first_login
		FROM employee_tb et
			JOIN department_tb dt ON et.idx_department = dt.idx_department 
			JOIN title_tb tt ON et.idx_title = tt.idx_title 
		WHERE emp_id = #{param1}
	</select>
	
	
	<select id="getSalesHistoryTotalPages" resultType="integer">
		SELECT CEIL(COUNT(*) / 13) FROM 
		(SELECT 
		    '발주' AS transactionType,
		    pot.idx_purchase_order AS transactionId,
		    pot.written_datetime AS transactionDatetime,
			CASE 
				WHEN COUNT(*) != 1 THEN CONCAT(pt.product_name, '외 ', COUNT(*), '건')
				ELSE pt.product_name
			END AS productName,
			ct.client_name AS customerName,
			SUM(pot.total_price) AS transactionAmount
		FROM purchase_order_tb pot
			JOIN product_tb pt ON pot.idx_product = pt.idx_product
			JOIN client_tb ct ON pot.idx_business = ct.idx_business
		GROUP BY pot.idx_purchasehtml
			UNION ALL
		SELECT
			'판매' AS transactionType,
			ot.order_no AS transactionId,
			ot.order_datetime AS transactionDatetime,
			CASE 
				WHEN COUNT(*) != 1 THEN CONCAT(pt.product_name, '외 ', COUNT(*), '건')
				ELSE pt.product_name
			END AS productName,
			ct.client_name AS customerName,
			SUM(ot.quantity * pt.unit_price) AS transactionAmount 
		FROM (SELECT * FROM order_tb ORDER BY order_datetime DESC LIMIT 18446744073709551615) ot
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
			JOIN client_tb ct ON ot.idx_business = ct.idx_business
		GROUP BY ot.order_no ASC) sht
		WHERE 1 = 1
		<if test="startDate != null and !startDate.equals('')">
			AND STR_TO_DATE(CONCAT(#{startDate}, '00:00:00.000'), '%Y-%m-%d %T.%f') &lt;= sht.transactionDatetime
		</if>
		<if test="endDate != null and !endDate.equals('')">
			AND STR_TO_DATE(CONCAT(#{endDate}, '23:59:59.999'), '%Y-%m-%d %T.%f') &gt;= sht.transactionDatetime
		</if>
		<if test="searchKeyword != null and !searchKeyword.equals('')">
			<choose>
				<when test="searchOption != null and searchOption.equals('product')">
					AND sht.productName LIKE CONCAT('%', #{searchKeyword}, '%') 
				</when>
				<when test="searchOption != null and searchOption.equals('businessPartner')">
					AND sht.customerName LIKE CONCAT('%', #{searchKeyword}, '%') 
				</when>
			</choose>
		</if>
	    <choose>
		    <when test="filter != null and filter.equals('purchaseOrder')">
		    	AND sht.transactionType = '발주'
		    </when>
		    <when test="filter != null and filter.equals('order')">
		    	AND sht.transactionType = '판매'
		    </when>		    
		</choose>	
	</select>
	
	<select id="getSalesHistory" resultType="salesData">
		SELECT * FROM
		(SELECT 
		    '발주' AS transactionType,
		    pot.idx_purchase_order AS transactionId,
		    pot.written_datetime AS transactionDatetime,
			CASE 
				WHEN COUNT(*) != 1 THEN CONCAT(pt.product_name, '외 ', COUNT(*), '건')
				ELSE pt.product_name
			END AS productName,
			ct.client_name AS customerName,
			SUM(pot.total_price) AS transactionAmount
		FROM purchase_order_tb pot
			JOIN product_tb pt ON pot.idx_product = pt.idx_product
			JOIN client_tb ct ON pot.idx_business = ct.idx_business
		GROUP BY pot.idx_purchasehtml
			UNION ALL
		SELECT
			'판매' AS transactionType,
			ot.order_no AS transactionId,
			ot.order_datetime AS transactionDatetime,
			CASE 
				WHEN COUNT(*) != 1 THEN CONCAT(pt.product_name, '외 ', COUNT(*), '건')
				ELSE pt.product_name
			END AS productName,
			ct.client_name AS customerName,
			SUM(ot.quantity * pt.unit_price) AS transactionAmount 
		FROM (SELECT * FROM order_tb ORDER BY order_datetime DESC LIMIT 18446744073709551615) ot
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
			JOIN client_tb ct ON ot.idx_business = ct.idx_business
		GROUP BY ot.order_no ASC) sht
		WHERE 1 = 1
		<if test="startDate != null and !startDate.equals('')">
			AND STR_TO_DATE(CONCAT(#{startDate}, '00:00:00.000'), '%Y-%m-%d %T.%f') &lt;= sht.transactionDatetime
		</if>
		<if test="endDate != null and !endDate.equals('')">
			AND STR_TO_DATE(CONCAT(#{endDate}, '23:59:59.999'), '%Y-%m-%d %T.%f') &gt;= sht.transactionDatetime
		</if>
		<choose>
			<when test="searchOption != null and searchOption.equals('product')">
				AND sht.productName LIKE CONCAT('%', #{searchKeyword}, '%') 
			</when>
			<when test="searchOption != null and searchOption.equals('businessPartner')">
				AND sht.customerName LIKE CONCAT('%', #{searchKeyword}, '%') 
			</when>
		</choose>
	    <choose>
		    <when test="filter != null and filter.equals('purchaseOrder')">
		    	AND sht.transactionType = '발주'
		    </when>
		    <when test="filter != null and filter.equals('order')">
		    	AND sht.transactionType = '판매'
		    </when>		    
		</choose>
		<choose>
			<when test="sortOption != null and sortOption.equals('new')">
				ORDER BY sht.transactionDatetime DESC
			</when>
			<when test="sortOption != null and sortOption.equals('name')">
				ORDER BY sht.productName
			</when>
			<otherwise>
				ORDER BY sht.transactionDatetime DESC
			</otherwise>
		</choose>	
		LIMIT ${(page - 1) * 13}, 13			
	</select>

	<select id="getEmployeeInfo">
		SELECT 
			tt.title_name AS titleName,
			dt.de_name AS departmentName,
			et.emp_birth_date AS empBirthDate,
			et.emp_email AS email,
			et.emp_phone_number AS phoneNumber,
			et.emp_name AS empName,
			et.emp_color AS empColor,
			et.emp_id AS empId,
			CASE 
				WHEN COUNT(ft.file_name) = 1 THEN ft.file_name
				ELSE 'NONE'
			END
			AS profileFilePath
		FROM employee_tb et
			JOIN title_tb tt ON tt.idx_title = et.idx_title AND et.idx_employee = #{ideEmployee}
			JOIN department_tb dt ON dt.idx_department = et.idx_department
			LEFT JOIN filestore_tb ft ON ft.idx_filetype = 1 AND ft.idx_ref = #{ideEmployee}
	</select>

	<update id="updateProfileInfo">
		UPDATE employee_tb 
		<set>
			<if test="birthDate != null">emp_birth_date = #{birthDate},</if>
			<if test="email != null">emp_email = #{email},</if>
			<if test="phoneNumber != null">emp_phone_number = #{phoneNumber},</if>
		</set>
		WHERE idx_employee = #{idxEmployee}
	</update>
	
	<select id="isProfileImage">
		SELECT idx_file FROM filestore_tb 
			WHERE idx_ref= #{idxEmployee}
				AND idx_filetype = 1
	</select>

	<update id="updateProfileImage">
		UPDATE filestore_tb SET file_name = #{profileImageName}
			WHERE idx_file = #{idxFile}
				AND idx_filetype = 1
				AND idx_ref = #{idxEmployee}
	</update>

	<insert id="saveProfileImage">
		INSERT INTO filestore_tb (idx_filetype, idx_ref, file_name)
			VALUES (1, #{idxEmployee}, #{profileImageName})
	</insert>
	
	<select id="getOrganization">
		SELECT 
			'department' AS type,
			dt.de_name AS id,
			dt.idx_department AS idxDepartment,
			CASE 
				WHEN rdt.de_name IS NULL THEN 'gaguissue'
				ELSE rdt.de_name
			END
			AS parent,
			dt.de_name AS text
		FROM organization_tb ot
			JOIN department_tb dt ON dt.idx_department = ot.depart_idx
			LEFT JOIN department_tb rdt ON rdt.idx_department = ot.root_depart_idx
	</select>
	
	<select id="getEmployeeList">
		SELECT 
			tt.title_name AS titleName,
			dt.de_name AS departmentName,
			dt.idx_department AS idxDepartment,
			et.emp_birth_date AS empBirthDate,
			et.emp_email AS email,
			et.emp_phone_number AS phoneNumber,
			et.emp_name AS empName,
			et.emp_color AS empColor,
			CASE 
				WHEN ft.file_name IS NOT NULL THEN ft.file_name
				ELSE 'NONE'
			END AS profileFilePath,
			et.idx_employee AS idx_employee
		FROM employee_tb et
			JOIN title_tb tt ON tt.idx_title = et.idx_title 
			JOIN department_tb dt ON dt.idx_department = et.idx_department
			LEFT JOIN filestore_tb ft ON ft.idx_filetype = 1 AND ft.idx_ref = et.idx_employee
		WHERE et.idx_department = (SELECT idx_department FROM employee_tb WHERE idx_employee = #{idxEmployee})
		ORDER BY tt.idx_title ASC
		LIMIT ${(page - 1) * 5}, 5	
	</select>
	
	<select id="getGoTotalPages">
		SELECT 
			CEIL(COUNT(*) / 5)
		FROM employee_tb et
			JOIN title_tb tt ON tt.idx_title = et.idx_title 
			JOIN department_tb dt ON dt.idx_department = et.idx_department
			LEFT JOIN filestore_tb ft ON ft.idx_filetype = 1 AND ft.idx_ref = et.idx_employee
		WHERE et.idx_department = (SELECT idx_department FROM employee_tb WHERE idx_employee = #{idxEmployee})	
	</select>	
	
	<select id="getAJAXEmployeeList">
		SELECT 
			tt.title_name AS titleName,
			dt.de_name AS departmentName,
			dt.idx_department AS idxDepartment,
			et.emp_birth_date AS empBirthDate,
			et.emp_email AS email,
			et.emp_phone_number AS phoneNumber,
			et.emp_name AS empName,
			et.emp_color AS empColor,
			CASE 
				WHEN ft.file_name IS NOT NULL THEN ft.file_name
				ELSE 'NONE'
			END AS profileFilePath,
			et.idx_employee AS idx_employee
		FROM employee_tb et
			JOIN title_tb tt ON tt.idx_title = et.idx_title 
			JOIN department_tb dt ON dt.idx_department = et.idx_department
			LEFT JOIN filestore_tb ft ON ft.idx_filetype = 1 AND ft.idx_ref = et.idx_employee
		WHERE et.idx_department = #{selectedDepartment}
		ORDER BY tt.idx_title ASC
		LIMIT ${(page - 1) * 5}, 5	
	</select>
	
	<select id="getTotalPages">
		SELECT 
			CEIL(COUNT(*) / 5)
		FROM employee_tb et WHERE et.idx_department = #{selectedDepartment}	
	</select>
	
	<select id="getEmployeeProfile" resultType="employee">
		SELECT 
			et.emp_name AS empName,
			et.emp_phone_number AS phoneNumber,
			et.emp_birth_date AS empBirthDate,
			et.emp_email AS emp_email,
			dt.de_name AS departmentName,
			tt.title_name AS titleName,
			CASE 
				WHEN ft.file_name IS NOT NULL THEN ft.file_name
				ELSE 'NONE'
			END AS profileFilePath
		FROM employee_tb et
			JOIN title_tb tt on et.idx_title = tt.idx_title AND et.idx_employee = #{selectedIdxEmployee}
			JOIN department_tb dt ON et.idx_department = dt.idx_department
			LEFT JOIN filestore_tb ft ON ft.idx_filetype = 1 AND ft.idx_ref = et.idx_employee
	</select>
	
	<select id="findEmployeeByIdAndName" parameterType="map" resultType="employee">
	    SELECT *
	    FROM employee_tb
	    WHERE emp_id = #{emp_id}
	      AND emp_name = #{emp_name}
	</select>
	
	<select id="findEmployeeById" parameterType="String" resultType="employee">
	    SELECT *
	    FROM employee_tb
	    WHERE emp_id = #{emp_id}
	</select>
	
	<update id="updateEmployeePassword" parameterType="employee">
	    UPDATE employee_tb
	    SET emp_pw = #{emp_pw}
	    WHERE emp_id = #{emp_id}
	</update>
	
	<update id="updateFirstLoginStatus" parameterType="map">
	    UPDATE employee_tb
	    SET first_login = #{first_login}
	    WHERE emp_id = #{emp_id}
	</update>
	
	
</mapper>
