<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ko.gagu.issue.dao.ReservationDAO">
	<!-- [jeong] 예약을 등록하기 전에 동일한 시간대에 예약이 있는지 확인한다 -->
	<select id="isReservation">
		SELECT 
			COUNT(*) 
		FROM reservation_tb rt
		JOIN reservation_time_tb rtt 
			ON rt.idx_reservation = rtt.idx_reservation
				AND rt.idx_meeting_room = #{selectedRoomNo}
				AND rtt.rsv_date = #{selectedDate}
				AND rtt.rsv_time IN
				<foreach collection="selectedTime" item="time" open="(" separator="," close=")">
					#{time}
				</foreach>
	</select>
	
	<!-- [jeong] 예약 정보를 등록하고 예약 번호를 rsvDTO 객체의 필드에 저장함 -->
	<insert id="registerRsv"
		useGeneratedKeys="true" 
		keyColumn="idx_reservation"
		keyProperty="idxReservation"
		parameterType="reservation">
		INSERT INTO reservation_tb (idx_meeting_room, reservist, re_people, start_datetime, end_datetime)
		VALUES (#{idxMeetingRoom}, #{reservist}, #{rsvPeople}, #{startDatetime}, #{endDatetime})
	</insert>
	
	<!-- [jeong] 유효한 예약 번호로 예약 시간을 저장함 -->
	<insert id="insertRsvTime">
		INSERT INTO reservation_time_tb (idx_reservation, rsv_time, rsv_date)
			VALUES (#{idxReservation}, #{time}, #{selectedDate})
	</insert>
	
	<!-- [jeong] 선택한 날짜 및 시간에 예약 가능한 회의실을 알려줌 -->
	<select id="getRsvRoomStatus" resultType="roomStatus">
		SELECT 
			mt.idx_meeting_room AS idxMeetingroom,
			mt.mr_people AS mrPeople,
			rtt.rsv_time IS NULL AS isReservation
		FROM meetingroom_tb mt 
		LEFT JOIN reservation_tb rt 
			ON rt.idx_meeting_room = mt.idx_meeting_room
		LEFT JOIN reservation_time_tb rtt 
			ON rt.idx_reservation = rtt.idx_reservation
			AND rtt.rsv_date = #{selectDate}
			AND rtt.rsv_time IN
		<foreach collection="selectedTime" item="time" open="(" separator="," close=")">
			#{time}
		</foreach>
		GROUP BY mt.idx_meeting_room
	</select>
	
	<!-- [jeong] 페이징 처리된 예약 내역을 반환 -->
	<select id="getReservationList" resultType="reservation">
		SELECT
			REPLACE((SELECT DATE_FORMAT(rtt.rsv_date, '%Y/%m/%d')
			FROM reservation_time_tb rtt 
			WHERE rtt.idx_reservation = rt.idx_reservation LIMIT 1), '-', '/') AS reservationDate,
			CONCAT(DATE_FORMAT(rt.start_datetime, '%H:%i'), ' ~ ', DATE_FORMAT(rt.end_datetime, '%H:%i')) AS reservationTime,
			mt.mr_name AS roomName,
			rt.re_status AS rsvStatus,
			et.emp_name AS resEmpName,
			rt.idx_reservation AS idxReservation
		FROM reservation_tb rt 
			JOIN employee_tb et ON et.idx_employee = #{idxEmployee} AND rt.reservist = #{idxEmployee}
			JOIN meetingroom_tb mt ON mt.idx_meeting_room = rt.idx_meeting_room
		ORDER BY rt.rsv_datetime DESC
		LIMIT ${(page - 1) * 12}, 12		
	</select>
	
	<!-- [jeong] 예약 내역의 총 페이지 수를 반환 -->
	<select id="getRsvListTotalPages">
		SELECT 
			CEIL(COUNT(*) / 12)
		FROM reservation_tb rt
			JOIN employee_tb et ON et.idx_employee = #{idxEmployee} AND rt.reservist = #{idxEmployee}
			JOIN meetingroom_tb mt ON mt.idx_meeting_room = rt.idx_meeting_room
	</select>
	
	<!-- [jeong] 예약한 종료 시간이 지난 예약들을 조회 --> 
	<select id="getFinshRsv">
		SELECT idx_reservation FROM reservation_tb WHERE end_datetime &lt; NOW()
	</select>
	
	<!-- [jeong] 종료 시간이 지난 예약들을 사용완료 상태로 변경 -->
	<update id="updateReservationList">
		UPDATE reservation_tb SET re_status = '사용완료' WHERE idx_reservation = #{idxReservation}
	</update>
	
	<!-- [jeong] 예약한 직원인지 확인 후 예약을 취소 상태로 변경 --> 
	<update id="cancelReservation">
		UPDATE reservation_tb SET re_status = '예약취소' WHERE idx_reservation = #{idxReservation} AND reservist = #{idxEmployee}
	</update>
</mapper>
