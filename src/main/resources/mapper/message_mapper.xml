<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="ko.gagu.issue.dao.MessageDAO">
	
	<select id="roomList" resultType="message">
		SELECT
	    mt.idx_messageroom,
	    #{param1} as idx_emp, 
	    IF (mh.receiver = #{param1}, mh.sender, mh.receiver) AS other_emp,  
	    MAX(mh.send_datetime) AS reg_date, 
	    (SELECT et.emp_name FROM employee_tb et WHERE et.idx_employee = other_emp) AS name,
	    (SELECT COUNT(*) 
	        FROM message_history_tb mh  
	        WHERE mh.idx_messageroom = mt.idx_messageroom 
	          AND ((mh.sender = #{param1} AND mt.is_sender_exit = 'N')
	          OR (mh.receiver = #{param1} AND mt.is_receiver_exit = 'N'))
	    ) AS msg_count,
	    (SELECT COUNT(*) 
	        FROM message_history_tb mh  
	        WHERE mh.idx_messageroom = mt.idx_messageroom 
	          AND mh.receiver = #{param1}
	          AND mh.is_receiver_read = 'N'
	          AND mh.sender = other_emp
	    ) AS no_read
	FROM 
	    messageroom_tb mt
	LEFT JOIN 
	    message_history_tb mh ON mt.idx_messageroom = mh.idx_messageroom
	WHERE 
	    (mh.sender = #{param1} OR mh.receiver = #{param1})
	    <if test="param2 != null and param2 != '' and param2 != '전체'">
           	 AND (SELECT et.emp_name FROM employee_tb et WHERE et.idx_employee = IF (mh.receiver = #{param1}, mh.sender, mh.receiver)) LIKE CONCAT('%', #{param2}, '%')
        </if>
	GROUP BY
	    mt.idx_messageroom, other_emp
	ORDER BY 
	    reg_date DESC
	
	</select>
	
	
	<select id="lastContent" resultType="message">
	 
		SELECT 
		    mht.*,
		    ft.file_name,
		    (SELECT ft.origin_name FROM filestore_tb ft WHERE ft.idx_ref = mht.idx_message AND ft.idx_filetype = 6) as origin_name
		FROM 
		    message_history_tb mht
		LEFT JOIN 
		    filestore_tb ft 
		    ON (#{param2} = ft.idx_ref)
		    AND ft.idx_filetype = 1
		WHERE 
		    mht.idx_messageroom = #{param1}
		    AND mht.receiver IN (#{param2},#{param3})
		    AND mht.sender IN (#{param2},#{param3})
		    AND NOT (mht.sender = #{param3} AND mht.sender_del = 1)
		ORDER BY 
		    mht.send_datetime DESC LIMIT 1
	</select>
	
	
	<select id="messageList" resultType="message">
	
		SELECT
	    mht.idx_message,
	    IF(mht.receiver = mht.receiver , mht.sender, mht.receiver) AS other_emp,
	    (SELECT et.emp_name FROM employee_tb et WHERE et.idx_employee = other_emp) AS other_name,
	    mht.msg_content,
	    mht.send_datetime,
	    mht.receiver,
	    mht.sender,
	    mt.is_sender_exit,
	    mt.is_receiver_exit,
	    mht.is_receiver_read,
	    mht.sender_del,
	    p.file_name,
    	(SELECT ft.file_name FROM filestore_tb ft WHERE ft.idx_ref = mht.idx_message AND ft.idx_filetype = 6) as new_picname,
    	(SELECT ft.origin_name FROM filestore_tb ft WHERE ft.idx_ref = mht.idx_message AND ft.idx_filetype = 6) as origin_name
	FROM messageroom_tb mt
	JOIN message_history_tb mht ON mt.idx_messageroom = mht.idx_messageroom
	LEFT JOIN (
	    SELECT ft.idx_ref, ft.file_name
	    FROM filestore_tb ft
	    WHERE ft.idx_filetype = 1 
	) AS p ON IF(mht.receiver = mht.receiver , mht.sender, mht.receiver) = p.idx_ref
	WHERE mht.idx_messageroom = #{idx}
	  AND (mt.receiver IN (#{idx_emp},#{otherEmp}))
	  AND (mt.sender IN (#{idx_emp},#{otherEmp}))
	  
	</select>
	
	<update id="messageRead">
		UPDATE message_history_tb SET is_receiver_read = 1 
			WHERE idx_messageroom  = #{param1}
			AND receiver = #{param2} 
			AND sender = #{param3}
			AND is_receiver_read = 0
	</update>
	
	<insert id="sendMessage">
		INSERT INTO message_history_tb (idx_messageroom, sender, receiver , msg_content) 
			values (#{param4}, #{param2}, #{param3}, #{param1})
	</insert>

	 <insert id="sendMessageWithFile"
	 	parameterType="message"
	 	useGeneratedKeys="true" 
		keyProperty="idx_message" 
		keyColumn="idx_message">
		INSERT INTO message_history_tb (idx_messageroom, sender, receiver , msg_content) 
			values (#{idx_messageroom}, #{idx_emp}, #{other_emp}, #{msg_content})
	</insert> 

	<select id="subjectCall" resultType="message">
 		SELECT et.idx_employee, et.emp_name as other_name, dt.de_name, p.file_name 
		FROM employee_tb et
		JOIN department_tb dt ON et.idx_department = dt.idx_department 
		LEFT JOIN (SELECT ft.idx_ref, ft.file_name FROM filestore_tb ft WHERE ft.idx_ref = #{param1} AND ft.idx_filetype = 1) AS p ON et.idx_employee = p.idx_ref
		WHERE idx_employee = #{param1}
	</select>
	
	<select id="roomExist" resultType="java.lang.Integer">
		SELECT COALESCE(
	    (SELECT idx_messageroom 
	     FROM messageroom_tb mt  
	     WHERE (mt.sender = #{param2} AND mt.receiver = #{param1}) 
	        OR (mt.sender = #{param1} AND mt.receiver = #{param2})
	    ), 0) AS idx_messageroom;
	</select>

	<insert id="roomCreate" useGeneratedKeys="true" 
		keyColumn="idx_messageroom"
		keyProperty="insert_id">
		INSERT INTO messageroom_tb (sender, receiver) values (#{param1}, #{param2})
	</insert>
	
	<update id="msgDelete">
		UPDATE message_history_tb SET sender_del = 1 WHERE idx_message = #{param1}
	</update>
	
	<insert id="saveProfileImagePath">
		INSERT INTO filestore_tb (idx_filetype, idx_ref, origin_name, file_name) 
			VALUES (6, #{param3}, #{param1},#{param2})
	</insert>
	
	<select id="noreadCount" resultType="int">
	SELECT COUNT(mht.is_receiver_read) AS no_read
	FROM message_history_tb mht 
	WHERE mht.receiver = #{param1} AND mht.is_receiver_read = 0;
	</select>
</mapper>
