<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="ko.gagu.issue.dao.LogiDepartmentDAO">
	
	
	<!-- 인벤토리 리스트 그리기 -->
	<select id="inventoryListDraw" resultType="logi">
		SELECT it.idx_product , 
				pct.category ,
				pt.product_name ,
				ct.client_name ,
				it.current_stock ,
				pt.minimum_stock 
		FROM product_tb pt 
			JOIN client_tb ct ON ct.idx_business = pt.idx_business 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
			JOIN inventory_tb it ON it.idx_product = pt.idx_product
		<where>
			<choose>
				<when test="param1 == 'warn'">
					it.current_stock &lt; pt.minimum_stock
				</when>
				<otherwise>
					<if test="param1 != null and param1 != '' and param1 != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{param1},'%')
					</if>
					<if test="param2 != null and param2 != '' and param2 != '전체'">
						AND pct.category = #{param2}
					</if>
					<if test="param3 != null and param3 != '' and param3 != '전체'">
						AND ct.client_name = #{param3}
					</if>
				</otherwise>
			</choose>
		</where>
		ORDER BY pct.idx_product_category 
	</select>
	<!-- ***페이징*** -->
	<select id="getInventoryPage" resultType="Integer">
		SELECT CEIL(COUNT(*)/13)
		FROM product_tb pt 
			JOIN client_tb ct ON ct.idx_business = pt.idx_business 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
			JOIN inventory_tb it ON it.idx_product = pt.idx_product
	</select>
	<!-- ***페이징-필터에 따른 페이지 개수*** -->
	<select id="getFilterTotalPagesInven" resultType="Integer">
		SELECT CEIL(COUNT(*) / 13)
		FROM product_tb pt 
			JOIN client_tb ct ON ct.idx_business = pt.idx_business 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
			JOIN inventory_tb it ON it.idx_product = pt.idx_product
		<where> 1=1
			<choose>
				<when test="paging.doProductSearch == 'warn'">
					AND it.current_stock &lt; pt.minimum_stock
				</when>
				<otherwise>
					<if test="paging.doProductSearch != null and paging.doProductSearch != '' and paging.doProductSearch != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{paging.doProductSearch},'%')
					</if>
					<if test="paging.doProductCategory != null and paging.doProductCategory != '' and paging.doProductCategory != '전체'">
						AND pct.category = #{paging.doProductCategory}
					</if>
					<if test="paging.doClientList != null and paging.doClientList != '' and paging.doClientList != '전체'">
						AND ct.client_name = #{paging.doClientList}
					</if>
				</otherwise>
			</choose>
		</where>
		ORDER BY pct.idx_product_category 
	</select>
	<!-- ***페이징-필터에 따른 리스트 출력 -->
	<select id="fetchFilterListInven" resultType="logi">
		SELECT it.idx_product , 
				pct.category ,
				pt.product_name ,
				ct.client_name ,
				it.current_stock ,
				pt.minimum_stock 
		FROM product_tb pt 
			JOIN client_tb ct ON ct.idx_business = pt.idx_business 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
			JOIN inventory_tb it ON it.idx_product = pt.idx_product
		<where> 1=1 
			<choose>
				<when test="paging.doProductSearch == 'warn'">
					AND it.current_stock &lt; pt.minimum_stock
				</when>
				<otherwise>
					<if test="paging.doProductSearch != null and paging.doProductSearch != '' and paging.doProductSearch != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{paging.doProductSearch},'%')
					</if>
					<if test="paging.doProductCategory != null and paging.doProductCategory != '' and paging.doProductCategory != '전체'">
						AND pct.category = #{paging.doProductCategory}
					</if>
					<if test="paging.doClientList != null and paging.doClientList != '' and paging.doClientList != '전체'">
						AND ct.client_name = #{paging.doClientList}
					</if>
				</otherwise>
			</choose>
		</where>
		ORDER BY pct.idx_product_category 
		LIMIT #{paging.year}, 13
	</select>
	
	<!-- 제품 상새보기 -->
	<select id="inventoryDetail" resultType="logi">
		SELECT pt.product_name ,
				ct.client_name ,
				pct.category ,
				wt.section_name ,
				it.current_stock ,
				pt.minimum_stock ,
				pt.purchase_price ,
				pt.unit_price ,
				SUM(pt.unit_price - pt.purchase_price) as profit ,
				pt.product_description 
		FROM product_tb pt 
			JOIN client_tb ct ON pt.idx_business = ct.idx_business 
			JOIN warehouse_tb wt ON pt.idx_storage = wt.idx_storage 
			JOIN inventory_tb it ON pt.idx_product = it.idx_product 
			JOIN product_category_tb pct ON pt.idx_product_category = pct.idx_product_category 
		WHERE pt.idx_product = #{param1}
	</select>
	<select id="inventoryPhoto" resultType="String">
		SELECT file_name FROM filestore_tb ft WHERE idx_filetype = 10 AND idx_ref = #{param1}
	</select>
	
	
	
	<!-- 카테고리 리스트 -->
	<select id="getCategoryList" resultType="String">
		SELECT category 
		FROM product_category_tb
		ORDER BY idx_product_category
	</select>
	<!-- 발주처 리스트 -->
	<select id="getClientList" resultType="String">
		SELECT client_name 
		FROM client_tb 
		WHERE client_type = '발주처'
		ORDER BY client_name
	</select>
	
	
	
	<!-- 발주서 작성... -->
	<select id="getPONumber" resultType="String">
		SELECT idx_purchasehtml 
		FROM purchase_order_tb
		ORDER BY idx_purchase_order DESC
		LIMIT 1
	</select>
	<select id="getEmpDept" resultType="String">
		SELECT de_name 
		FROM department_tb dt
			JOIN employee_tb et ON dt.idx_department = et.idx_department 
		WHERE et.idx_employee = #{param1}
	</select>
	<select id="getEmpLevel" resultType="String">
		SELECT tt.title_name 
		FROM title_tb tt 
			JOIN employee_tb et ON tt.idx_title = et.idx_title 
		WHERE et.idx_employee = #{param1}
	</select>
	<!-- 발주 - 클라이언트리스트 -->
	<select id="lackClient" resultType="String">
		SELECT ct.client_name
		FROM product_tb pt 
			JOIN client_tb ct ON ct.idx_business = pt.idx_business 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
			JOIN inventory_tb it ON it.idx_product = pt.idx_product 
		WHERE it.current_stock &lt; pt.minimum_stock
			AND it.is_po = 'n'
	</select>
	<!-- 발주 - 클라이언트에 따른 재고부족리스트 -->
	<select id="lackProductByClient" resultType="logi">	
		SELECT 
		    it.idx_product, 
		    pt.product_name, 
		    ct.client_name, 
		    it.current_stock, 
		    pt.minimum_stock
		FROM 
		    product_tb pt
		    JOIN client_tb ct ON ct.idx_business = pt.idx_business
		    JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category
		    JOIN inventory_tb it ON it.idx_product = pt.idx_product
		    LEFT JOIN (
		        SELECT 
		            st.idx_product, 
		            st.stock_status
		        FROM 
		            stockentries_tb st
		        WHERE 
		            st.stock_status = '입고완료'
		        GROUP BY 
		            st.idx_product
		    ) st ON it.idx_product = st.idx_product
		WHERE 
		    it.current_stock &lt; pt.minimum_stock 
		    AND ct.client_name = #{param1}
		    AND (st.idx_product IS NULL OR st.stock_status = '입고완료')
	</select>
	<!-- 발주 - 재고부족리스트로 html 채워넣기 -->
	<select id="getClientData" resultType="client">
		SELECT * FROM client_tb WHERE client_name=#{param1}
	</select>
	<select id="getPOProduct" resultType="logi">
		SELECT * FROM product_tb WHERE idx_product = #{param1}
	</select>
	<!-- 발주 주문 저장 -->
	<!-- 발주 데이터 DB 저장 -->
	<insert id="insertPurchase">
		INSERT INTO purchase_order_tb (idx_purchasehtml , idx_employee, idx_business, idx_product)
		VALUES(#{param1}, #{param2}, #{param3}, #{param4})
	</insert>
	<insert id="insertPurchaseGetIdx"
		useGeneratedKeys="true"
	   	keyColumn="idx_purchase_order"
	   	keyProperty="idx_purchase_order"
		parameterType="purchase_order">
		INSERT INTO purchase_order_tb (idx_purchasehtml , idx_employee, idx_business, idx_product, total_price)
		VALUES(#{idx_purchasehtml}, #{idx_employee}, #{idx_business}, #{idx_product}, #{total_price})
	</insert>
	<!-- 발주한 제품은 po 작성 자동채우기에서 제외하기 -->
	<!-- 발주서 파일명 저장 -->
	<update id="updatePurchase">
		UPDATE purchase_order_tb
		SET html_filename = #{param1}
		WHERE idx_purchasehtml = #{param2}
	</update>
	<!-- 발주서 저장 시, 바로 입고내역 저장 (입고상태 default) -->
	<insert id="insertReceiving">
		INSERT INTO stockentries_tb (idx_purchase_order, idx_product, order_quantity)
		VALUES(#{param1}, #{param2}, #{param3})
	</insert>
	
	
	
	
	<!-- 입고 내역 -->
	<select id="getReceivingHistory" resultType="logi">
		SELECT pot.idx_purchasehtml, 
				pt.idx_product,
				st.stock_datetime, 
				ct.client_name,
				pt.product_name, 
				st.order_quantity, 
				st.stock_quantity, 
				st.stock_status, 
				pot.html_filename
		FROM stockentries_tb st 
			JOIN purchase_order_tb pot ON st.idx_purchase_order = pot.idx_purchase_order 
			JOIN client_tb ct ON pot.idx_business = ct.idx_business 
			JOIN product_tb pt ON st.idx_product = pt.idx_product 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		<where>
			<choose>
				<when test="param1 == 'warn'">
					st.stock_status = '입고예정'
				</when>
				<otherwise>
					<if test="param1 != null and param1 != '' and param1 != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{param1},'%')
					</if>
					<if test="param2 != null and param2 != '' and param2 != '전체'">
						AND pct.category = #{param2}
					</if>
					<if test="param3 != null and param3 != '' and param3 != '전체'">
						AND ct.client_name = #{param3}
					</if>
				</otherwise>
			</choose>
		</where>
		ORDER BY st.stock_datetime DESC
	</select>
	<!-- ***입고내역-페이징-jsp 로드시 페이지 개수 -->
	<select id="getReceivingPage" resultType="Integer">
		SELECT CEIL (COUNT(*)/13)
		FROM stockentries_tb st 
			JOIN purchase_order_tb pot ON st.idx_purchase_order = pot.idx_purchase_order 
			JOIN client_tb ct ON pot.idx_business = ct.idx_business 
			JOIN product_tb pt ON st.idx_product = pt.idx_product 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category
	</select>
	<!-- ***입고내역-페이징 개수*** -->
	<select id="getFilterTotalPagesReceiving" resultType="Integer">
		SELECT CEIL (COUNT(*)/13)
		FROM stockentries_tb st 
			JOIN purchase_order_tb pot ON st.idx_purchase_order = pot.idx_purchase_order 
			JOIN client_tb ct ON pot.idx_business = ct.idx_business 
			JOIN product_tb pt ON st.idx_product = pt.idx_product 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		<where> 1=1
			<choose>
				<when test="paging.doProductSearch == 'warn'">
					AND st.stock_status = '입고예정'
				</when>
				<otherwise>
					<if test="paging.doProductSearch != null and paging.doProductSearch != '' and paging.doProductSearch != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{paging.doProductCategory},'%')
					</if>
					<if test="paging.doProductCategory != null and paging.doProductCategory != '' and paging.doProductCategory != '전체'">
						AND pct.category = #{paging.doProductCategory}
					</if>
					<if test="paging.doClientList != null and paging.doClientList != '' and paging.doClientList != '전체'">
						AND ct.client_name = #{paging.doClientList}
					</if>
				</otherwise>
			</choose>
		</where>
	</select>
	<!-- ***페이징-리스트*** -->
	<select id="fetchFilterListReceiving" resultType="logi">
		SELECT pot.idx_purchasehtml, 
				pt.idx_product,
				st.stock_datetime, 
				ct.client_name,
				pt.product_name, 
				st.order_quantity, 
				st.stock_quantity, 
				st.stock_status, 
				pot.html_filename
		FROM stockentries_tb st 
			JOIN purchase_order_tb pot ON st.idx_purchase_order = pot.idx_purchase_order 
			JOIN client_tb ct ON pot.idx_business = ct.idx_business 
			JOIN product_tb pt ON st.idx_product = pt.idx_product 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		<where> 1=1
			<choose>
				<when test="paging.doProductSearch == 'warn'">
					AND st.stock_status = '입고예정'
				</when>
				<otherwise>
					<if test="paging.doProductSearch != null and paging.doProductSearch != '' and paging.doProductSearch != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{paging.doProductCategory},'%')
					</if>
					<if test="paging.doProductCategory != null and paging.doProductCategory != '' and paging.doProductCategory != '전체'">
						AND pct.category = #{paging.doProductCategory}
					</if>
					<if test="paging.doClientList != null and paging.doClientList != '' and paging.doClientList != '전체'">
						AND ct.client_name = #{paging.doClientList}
					</if>
				</otherwise>
			</choose>
		</where>
		ORDER BY st.stock_datetime DESC
		LIMIT 0, 13
	</select>
	<!-- 바코드로 입고 수량 증가 -->
	<update id="updatePOQuantity">
		UPDATE stockentries_tb 
		SET stock_quantity = stock_quantity + 1
		WHERE idx = (SELECT st.idx 
						FROM stockentries_tb st 
						WHERE idx_product = #{param1}
							AND stock_status ='입고예정'
						ORDER BY st.idx DESC
						LIMIT 1)
	</update>
	<!-- 바코드로 수량증가하고있는 제품명 -->
	<select id="productName" resultType="String">
		SELECT product_name
		FROM product_tb
		WHERE idx_product = #{param1}
	</select>
	<!-- 주문 수량과 입고 수량이 동일한가? -->
	<select id="isReceivingFinish" resultType="Integer">
		SELECT count(*) as cnt
		FROM stockentries_tb
		WHERE idx = (SELECT st.idx 
						FROM stockentries_tb st 
						WHERE idx_product = #{param1}
							AND stock_status ='입고예정'
						ORDER BY st.idx DESC
						LIMIT 1)
			AND order_quantity = stock_quantity
	</select>
	<!-- 주문 수량 == 입고 수량, 입고 상태 업데이트 -->
	<update id="updateReceivingFinish">
		UPDATE stockentries_tb 
		SET stock_status = '입고완료'
		WHERE idx = (SELECT st.idx 
						FROM stockentries_tb st 
						WHERE idx_product = #{param1}
							AND stock_status ='입고예정'
						ORDER BY st.idx DESC
						LIMIT 1)
	</update>
	<!-- 주문 수량 == 입고 수량, 재고 수량 업데이트 -->
	<update id="updateInventoryReceive">
		UPDATE inventory_tb 
		SET current_stock = current_stock + (select stock_quantity 
											from stockentries_tb 
											where idx = (SELECT st.idx 
															FROM stockentries_tb st 
															WHERE idx_product = #{param1}
																AND stock_status ='입고완료'
															ORDER BY st.idx DESC
															LIMIT 1))
		WHERE idx_product = #{param1}
	</update>
	
	
	
	<!-- 주문 내역 리스트 -->
	<select id="getOrderList" resultType="logi">
		SELECT
			ot.order_no,
			ot.order_datetime,
			ct.client_name,
		    pt.product_name,
		    COUNT(ot.order_no) AS order_row,
		    (SELECT SUM(ot2.quantity * pt2.unit_price)
		     FROM order_tb ot2
		     	JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		     WHERE ot2.order_no = ot.order_no) AS order_total_price,
			ot.accept
		FROM
		    order_tb ot JOIN product_tb pt ON ot.idx_product = pt.idx_product
		    			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
		    			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		<where>
			<choose>
				<when test="param1 == 'warn'">
					ot.accept='n'
				</when>
				<otherwise>
					<if test="param1 != null and param1 != '' and param1 != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{param1},'%')
					</if>
					<if test="param2 != null and param2 != '' and param2 != '전체'">
						AND pct.category = #{param2}
					</if>
					<if test="param3 != null and param3 != '' and param3 != '전체'">
						AND ct.client_name = #{param3}
					</if>
				</otherwise>
			</choose>
		</where>
		GROUP BY ot.order_no DESC
	</select>
	<!-- *** 주문내역 페이징 - 페이지 로드 시 개수 *** -->
	<select id="getOrderPage" resultType="Integer">
		SELECT CEIL(COUNT(*)/13)
		FROM (
		    SELECT
		        ot.order_no,
		        ot.order_datetime,
		        ct.client_name,
		        pt.product_name,
		        COUNT(ot.order_no) AS order_row,
		        (SELECT SUM(ot2.quantity * pt2.unit_price)
		         FROM order_tb ot2
		            JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		         WHERE ot2.order_no = ot.order_no) AS order_total_price,
		        ot.accept
		    FROM
		        order_tb ot 
		        JOIN product_tb pt ON ot.idx_product = pt.idx_product
		        JOIN client_tb ct ON ot.idx_business = ct.idx_business 
		        JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		    GROUP BY ot.order_no DESC
		) AS subquery
	</select>
	<!-- *** 주문내역 페이징 - 필터링 페이지 개수 -->
	<select id="getFilterTotalPagesOrder" resultType="Integer">
		SELECT CEIL(COUNT(*)/13)
		FROM (
		    SELECT
		        ot.order_no,
		        ot.order_datetime,
		        ct.client_name,
		        pt.product_name,
		        COUNT(ot.order_no) AS order_row,
		        (SELECT SUM(ot2.quantity * pt2.unit_price)
		         FROM order_tb ot2
		            JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		         WHERE ot2.order_no = ot.order_no) AS order_total_price,
		        ot.accept
		    FROM
		        order_tb ot 
		        JOIN product_tb pt ON ot.idx_product = pt.idx_product
		        JOIN client_tb ct ON ot.idx_business = ct.idx_business 
		        JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		    <where>
				<choose>
					<when test="paging.doProductSearch == 'warn'">
						ot.accept='n'
					</when>
					<otherwise>
						<if test="paging.doProductSearch != null and paging.doProductSearch != '' and paging.doProductSearch != '전체'">
							AND pt.product_name LIKE CONCAT('%',#{param1},'%')
						</if>
						<if test="paging.doProductCategory != null and paging.doProductCategory != '' and paging.doProductCategory != '전체'">
							AND pct.category = #{param2}
						</if>
						<if test="paging.doClientList != null and paging.doClientList != '' and paging.doClientList != '전체'">
							AND ct.client_name = #{param3}
						</if>
					</otherwise>
				</choose>
			</where>
		    GROUP BY ot.order_no DESC
		) AS subquery
	</select>
	<!-- *** 주문내역 페이징 - 필터링 리스트 -->
	<select id="fetchFilterListOrder" resultType="logi">
		SELECT 
			ot.order_no,
			ot.order_datetime,
			ct.client_name,
		    pt.product_name,
		    COUNT(ot.order_no) AS order_row,
		    (SELECT SUM(ot2.quantity * pt2.unit_price)
		     FROM order_tb ot2
		     	JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		     WHERE ot2.order_no = ot.order_no) AS order_total_price,
			ot.accept
		FROM order_tb ot 
	        JOIN product_tb pt ON ot.idx_product = pt.idx_product
	        JOIN client_tb ct ON ot.idx_business = ct.idx_business 
	        JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
	    <where>
			<choose>
				<when test="paging.doProductSearch == 'warn'">
					ot.accept='n'
				</when>
				<otherwise>
					<if test="paging.doProductSearch != null and paging.doProductSearch != '' and paging.doProductSearch != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{param1},'%')
					</if>
					<if test="paging.doProductCategory != null and paging.doProductCategory != '' and paging.doProductCategory != '전체'">
						AND pct.category = #{param2}
					</if>
					<if test="paging.doClientList != null and paging.doClientList != '' and paging.doClientList != '전체'">
						AND ct.client_name = #{param3}
					</if>
				</otherwise>
			</choose>
		</where>
	    GROUP BY ot.order_no
	    ORDER BY ot.order_datetime DESC
	    LIMIT 0, 13
	</select>
	<!-- 주문 상세 내역 -->
	<select id="getOrderTime" resultType="String">
		SELECT order_datetime 
		FROM order_tb 
		WHERE order_no = #{param1} 
		GROUP BY order_no
	</select>
	<select id="getOrderClient" resultType="String">
		SELECT ct.client_name 
		FROM order_tb ot
			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
		WHERE order_no = #{param1} 
		GROUP BY order_no
	</select>
	<select id="getOrderTotal" resultType="Integer">
		SELECT SUM(ot.quantity * pt.unit_price)
		FROM order_tb ot
		JOIN product_tb pt ON ot.idx_product = pt.idx_product
		WHERE ot.order_no = #{param1}
	</select>
	<select id="getOrderProductList" resultType="logi">
		SELECT ot.idx_order,
			pt.idx_product,
			pt.product_name ,
			ot.quantity ,
			pt.unit_price ,
			it.current_stock,
			(ot.quantity*unit_price) AS order_per_price
		FROM order_tb ot 
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
			JOIN inventory_tb it ON ot.idx_product = it.idx_product
		WHERE ot.order_no = #{param1}
		ORDER BY idx_product
	</select>
	<!-- 출고 상태 -->
	<select id="getOrderAccept" resultType="String">
		SELECT accept
		FROM order_tb
		WHERE order_no = #{param1}
		LIMIT 1
	</select>
	
	<!-- 주문내역 제품 각각 출고하기 -->
	<insert id="insertDelivery">
		INSERT into delivery_tb (idx_order)
		VALUES(#{param1})
	</insert>
	<!-- 주문 수락 y로 변경 -->
	<update id="updateOrderState">
		UPDATE order_tb
		SET accept = 'y'
		WHERE idx_order = #{param1}
	</update>
	<!-- 주문 수락 시, 인벤토리 감소 -->
	<update id="updateInventory">
		UPDATE inventory_tb 
		SET current_stock = current_stock - (SELECT quantity 
											FROM order_tb
											WHERE idx_order = #{param1})
		WHERE idx_product = (SELECT idx_product 
							FROM order_tb
							WHERE idx_order = #{param1})
	</update>
	<!-- 주문 수락 시, 재고가 부족해지면 물류관리부서에게 연락할거임 -->
	<select id="lackCnt" resultType="Integer">
		SELECT count(*) as cnt
		FROM product_tb pt 
			join client_tb ct on ct.idx_business = pt.idx_business 
			join product_category_tb pct on pct.idx_product_category = pt.idx_product_category 
			join inventory_tb it on it.idx_product = pt.idx_product 
		WHERE it.current_stock &lt; pt.minimum_stock and it.is_po = 'n'
	</select>
	<!-- 물류관리부서 직원 전체 가져오기 -->
	<select id="getLogiEmp" resultType="Integer">
		SELECT idx_employee 
		FROM employee_tb 
		WHERE idx_department = 3
	</select>
	<!-- 알림 넣기 -->
	<insert id="insertAlarmLogiDept">
		INSERT INTO alerm_tb (idx_employee, al_content, al_path)
		VALUES (#{param1}, '재고가 부족합니다. 재고리스트를 확인해 주세요!', '/logisticsDepartment/inventoryList.go');
	</insert>
	
	
	
	
	
	<!-- 수주처 리스트 -->
	<select id="getClientList2" resultType="String">
		SELECT client_name 
		FROM client_tb 
		WHERE client_type = '수주처'
		ORDER BY client_name
	</select>
	<!-- 출고 내역 -->
	<select id="getDeliveryList" resultType="logi">
		select ot.order_no, 
			dt.delivery_datetime,
			ct.client_name,
			pt.product_name,
			ot.quantity,
			pt.unit_price,
			(SELECT SUM(ot2.quantity * pt2.unit_price)
		     FROM order_tb ot2
		     	JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		     WHERE ot2.order_no = ot.order_no) AS order_total_price,
			dt.delivery_state	
		from delivery_tb dt
			JOIN order_tb ot ON dt.idx_order = ot.idx_order 
			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		<where>
			<choose>
				<when test="param1 == 'warn'">
				</when>
				<otherwise>
					<if test="param1 != null and param1 != '' and param1 != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{param1},'%')
					</if>
					<if test="param2 != null and param2 != '' and param2 != '전체'">
						AND pct.category = #{param2}
					</if>
					<if test="param3 != null and param3 != '' and param3 != '전체'">
						AND ct.client_name = #{param3}
					</if>
				</otherwise>
			</choose>
		</where>
	</select>
	<!-- 출고 내역 페이징 - 로드 시 페이지 수 -->
	<select id="getDeliveryPage" resultType="Integer">
		select CEIL(COUNT(*)/13)
		from delivery_tb dt
			JOIN order_tb ot ON dt.idx_order = ot.idx_order 
			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
	</select>
	<!-- 출고 내역 페이징 - 페이지 수 -->
	<select id="getFilterTotalPagesDelivery" resultType="Integer">
		select CEIL(COUNT(*)/13)
		from delivery_tb dt
			JOIN order_tb ot ON dt.idx_order = ot.idx_order 
			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		<where> 1=1 
			<choose>
				<when test="paging.doProductSearch == 'warn'">
				</when>
				<otherwise>
					<if test="paging.doProductSearch != null and paging.doProductSearch != '' and paging.doProductSearch != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{paging.doProductSearch},'%')
					</if>
					<if test="paging.doProductCategory != null and paging.doProductCategory != '' and paging.doProductCategory != '전체'">
						AND pct.category = #{paging.doProductCategory}
					</if>
					<if test="paging.doClientList != null and paging.doClientList != '' and paging.doClientList != '전체'">
						AND ct.client_name = #{paging.doClientList}
					</if>
				</otherwise>
			</choose>
		</where>
	</select>
	<!-- 출고 내역 페이징 - 출고 내역 리스트 -->
	<select id="fetchFilterListDelivery" resultType="logi">
		select ot.order_no, 
			dt.delivery_datetime,
			ct.client_name,
			pt.product_name,
			ot.quantity,
			pt.unit_price,
			(SELECT SUM(ot2.quantity * pt2.unit_price)
		     FROM order_tb ot2
		     	JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		     WHERE ot2.order_no = ot.order_no) AS order_total_price,
			dt.delivery_state	
		from delivery_tb dt
			JOIN order_tb ot ON dt.idx_order = ot.idx_order 
			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
		<where> 1=1 
			<choose>
				<when test="paging.doProductSearch == 'warn'">
				</when>
				<otherwise>
					<if test="paging.doProductSearch != null and paging.doProductSearch != '' and paging.doProductSearch != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{paging.doProductSearch},'%')
					</if>
					<if test="paging.doProductCategory != null and paging.doProductCategory != '' and paging.doProductCategory != '전체'">
						AND pct.category = #{paging.doProductCategory}
					</if>
					<if test="paging.doClientList != null and paging.doClientList != '' and paging.doClientList != '전체'">
						AND ct.client_name = #{paging.doClientList}
					</if>
				</otherwise>
			</choose>
		</where>
		LIMIT 0, 13
	</select>
	
	
	
	


</mapper>
