<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="ko.gagu.issue.dao.LogiDepartmentDAO">
	
	
	<!-- 인벤토리 리스트 그리기 -->
	<select id="inventoryListDraw" resultType="logi">
		SELECT it.idx_product , 
				pct.category ,
				pt.product_name ,
				ct.client_name ,
				it.current_stock ,
				pt.minimum_stock 
		FROM product_tb pt 
			JOIN client_tb ct ON ct.idx_business = pt.idx_business 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
			JOIN inventory_tb it ON it.idx_product = pt.idx_product
		<where>
			<choose>
				<when test="param1 == 'warn'">
					it.current_stock &lt; pt.minimum_stock
				</when>
				<otherwise>
					<if test="param1 != null and param1 != '' and param1 != '전체'">
						AND pt.product_name LIKE CONCAT('%',#{param1},'%')
					</if>
					<if test="param2 != null and param2 != '' and param2 != '전체'">
						AND pct.category = #{param2}
					</if>
					<if test="param3 != null and param3 != '' and param3 != '전체'">
						AND ct.client_name = #{param3}
					</if>
				</otherwise>
			</choose>
		</where>
		GROUP BY pct.category
		ORDER BY it.idx_product
	</select>
	
	
	<!-- 카테고리 리스트 -->
	<select id="getCategoryList" resultType="String">
		SELECT category 
		FROM product_category_tb
		ORDER BY idx_product_category
	</select>
	<!-- 발주처 리스트 -->
	<select id="getClientList" resultType="String">
		SELECT client_name 
		FROM client_tb 
		WHERE client_type = '발주처'
		ORDER BY client_name
	</select>
	
	
	
	<!-- 발주서 작성... -->
	<select id="getPONumber" resultType="String">
		SELECT idx_purchasehtml 
		FROM purchase_order_tb
		ORDER BY idx_purchase_order DESC
		LIMIT 1
	</select>
	<select id="getEmpDept" resultType="String">
		SELECT de_name 
		FROM department_tb dt
			JOIN employee_tb et ON dt.idx_department = et.idx_department 
		WHERE et.idx_employee = #{param1}
	</select>
	<select id="getEmpLevel" resultType="String">
		SELECT tt.title_name 
		FROM title_tb tt 
			JOIN employee_tb et ON tt.idx_title = et.idx_title 
		WHERE et.idx_employee = #{param1}
	</select>
	<!-- 발주 - 클라이언트리스트 -->
	<select id="lackClient" resultType="String">
		SELECT ct.client_name
		FROM product_tb pt 
			JOIN client_tb ct ON ct.idx_business = pt.idx_business 
			JOIN product_category_tb pct ON pct.idx_product_category = pt.idx_product_category 
			JOIN inventory_tb it ON it.idx_product = pt.idx_product 
		WHERE it.current_stock &lt; pt.minimum_stock
	</select>
	<!-- 발주 - 클라이언트에 따른 재고부족리스트 -->
	<select id="lackProductByClient" resultType="logi">
		SELECT it.idx_product , 
				pt.product_name ,
				ct.client_name ,
				it.current_stock ,
				pt.minimum_stock 
		FROM product_tb pt 
			join client_tb ct on ct.idx_business = pt.idx_business 
			join product_category_tb pct on pct.idx_product_category = pt.idx_product_category 
			join inventory_tb it on it.idx_product = pt.idx_product 
		WHERE it.current_stock &lt; pt.minimum_stock AND ct.client_name = #{param1}
	</select>
	<!-- 발주 - 재고부족리스트로 html 채워넣기 -->
	<select id="getClientData" resultType="client">
		SELECT * FROM client_tb WHERE client_name=#{param1}
	</select>
	<select id="getPOProduct" resultType="logi">
		SELECT * FROM product_tb WHERE idx_product = #{param1}
	</select>
	<!-- 발주 주문 저장 -->
	<!-- 발주 데이터 DB 저장 -->
	<insert id="insertPurchase">
		INSERT INTO purchase_order_tb (idx_purchasehtml , idx_employee, idx_business, idx_product)
		VALUES(#{param1}, #{param2}, #{param3}, #{param4})
	</insert>
	<insert id="insertPurchaseGetIdx"
		useGeneratedKeys="true"
	   	keyColumn="idx_purchase_order"
	   	keyProperty="idx_purchase_order"
		parameterType="purchase_order">
		INSERT INTO purchase_order_tb (idx_purchasehtml , idx_employee, idx_business, idx_product, total_price)
		VALUES(#{idx_purchasehtml}, #{idx_employee}, #{idx_business}, #{idx_product}, #{total_price})
	</insert>
	<!-- 발주서 파일명 저장 -->
	<update id="updatePurchase">
		UPDATE purchase_order_tb
		SET html_filename = #{param1}
		WHERE idx_purchasehtml = #{param2}
	</update>
	<!-- 발주서 저장 시, 바로 입고내역 저장 (입고상태 default) -->
	<insert id="insertReceiving">
		INSERT INTO stockentries_tb (idx_purchase_order, idx_product, order_quantity)
		VALUES(#{param1}, #{param2}, #{param3})
	</insert>
	
	
	
	
	<!-- 입고 내역 -->
	<select id="getReceivingHistory" resultType="logi">
		SELECT pot.idx_purchasehtml, st.stock_datetime, ct.client_name,
				pt.product_name, st.order_quantity, st.stock_quantity, 
				st.stock_status, pot.html_filename
		FROM stockentries_tb st 
			JOIN purchase_order_tb pot ON st.idx_purchase_order = pot.idx_purchase_order 
			JOIN client_tb ct ON pot.idx_business = ct.idx_business 
			JOIN product_tb pt ON st.idx_product = pt.idx_product 
		ORDER BY st.stock_datetime DESC
	</select>
	
	
	
	
	<!-- 주문 내역 리스트 -->
	<select id="getOrderList" resultType="logi">
		SELECT
			ot.order_no,
			ot.order_datetime,
			ct.client_name,
		    pt.product_name,
		    COUNT(ot.order_no) AS order_row,
		    (SELECT SUM(ot2.quantity * pt2.unit_price)
		     FROM order_tb ot2
		     	JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		     WHERE ot2.order_no = ot.order_no) AS order_total_price,
			ot.accept
		FROM
		    order_tb ot JOIN product_tb pt ON ot.idx_product = pt.idx_product
		    			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
		GROUP BY ot.order_no DESC
	</select>
	
	<!-- 주문 상세 내역 -->
	<select id="getOrderTime" resultType="String">
		SELECT order_datetime 
		FROM order_tb 
		WHERE order_no = #{param1} 
		GROUP BY order_no
	</select>
	<select id="getOrderClient" resultType="String">
		SELECT ct.client_name 
		FROM order_tb ot
			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
		WHERE order_no = #{param1} 
		GROUP BY order_no
	</select>
	<select id="getOrderTotal" resultType="Integer">
		SELECT SUM(ot.quantity * pt.unit_price)
		FROM order_tb ot
		JOIN product_tb pt ON ot.idx_product = pt.idx_product
		WHERE ot.order_no = #{param1}
	</select>
	<select id="getOrderProductList" resultType="logi">
		SELECT ot.idx_order,
			pt.idx_product,
			pt.product_name ,
			ot.quantity ,
			pt.unit_price ,
			it.current_stock,
			(ot.quantity*unit_price) AS order_per_price
		FROM order_tb ot 
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
			JOIN inventory_tb it ON ot.idx_product = it.idx_product
		WHERE ot.order_no = #{param1}
		ORDER BY idx_product
	</select>
	<!-- 출고 상태 -->
	<select id="getOrderAccept" resultType="String">
		SELECT accept
		FROM order_tb
		WHERE order_no = #{param1}
		LIMIT 1
	</select>
	
	<!-- 주문내역 제품 각각 출고하기 -->
	<insert id="insertDelivery">
		INSERT into delivery_tb (idx_order)
		VALUES(#{param1})
	</insert>
	<!-- 주문 수락 y로 변경 -->
	<update id="updateOrderState">
		UPDATE order_tb
		SET accept = 'y'
		WHERE idx_order = #{param1}
	</update>
	
	
	<!-- 출고 내역 -->
	<select id="getDeliveryList" resultType="logi">
		select ot.order_no, 
			dt.delivery_datetime,
			ct.client_name,
			pt.product_name,
			ot.quantity,
			pt.unit_price,
			(SELECT SUM(ot2.quantity * pt2.unit_price)
		     FROM order_tb ot2
		     	JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		     WHERE ot2.order_no = ot.order_no) AS order_total_price,
			dt.delivery_state	
		from delivery_tb dt
			JOIN order_tb ot ON dt.idx_order = ot.idx_order 
			JOIN client_tb ct ON ot.idx_business = ct.idx_business 
			JOIN product_tb pt ON ot.idx_product = pt.idx_product
		</select>
	
	


</mapper>
