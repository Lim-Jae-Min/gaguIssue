<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ko.gagu.issue.dao.MainDAO">

	
	
	
	
	
	<!-- [do] -->
	
	<!-- 로그인 직원 정보 전체 가져오기 -->
	<select id="getEmpData" resultType="employee">
		SELECT * 
		FROM employee_tb 
		WHERE emp_id = #{param1}
	</select>
	
	
	
	<!-- 조직도 관련,, -->
	<select id="getDename" resultType="String">
		SELECT dt.de_name
		FROM employee_tb et
			JOIN department_tb dt ON et.idx_department = dt.idx_department
		WHERE et.idx_employee = #{param1}
	</select>
	<select id="getOrganization" resultType="employee">
		SELECT et.emp_name , ft.file_name 
		FROM employee_tb et 
			JOIN filestore_tb ft ON et.idx_employee = ft.idx_ref
		WHERE ft.idx_filetype =1
			and et.idx_department = #{param2}
		limit 3
	</select>
	
	
	
	
	<!-- 회의실 예약 관련,, -->
	<select id="getReservList" resultType="reservation">
		SELECT rt.idx_reservation ,
				mt.mr_name ,
				rt.start_datetime 
		FROM reservation_tb rt
			JOIN meetingroom_tb mt ON rt.idx_meeting_room = mt.idx_meeting_room 
		WHERE rt.reservist = 13
				AND rt.re_status = '예약완료'
				AND rt.start_datetime > CURDATE()
		ORDER BY rt.start_datetime
		LIMIT 3
	</select>
	
	
	
	<!-- 기안서 관련,, -->
	<select id="getMyDocumentCnt" resultType="Integer">
		SELECT COUNT(*)
		FROM approval_tb 
		WHERE idx_employee = 13 AND final_ap_status = '진행중'
	</select>
	<select id="getMyApproveCnt" resultType="Integer">
		SELECT COUNT(*) 
		FROM approval_line_tb 
		WHERE is_approval = -1 AND idx_employee = 13
	</select>
	
	
	
	<!-- 직원 오늘의 출퇴근 기록 가져오기 -->
	<select id="getTodayCheck" resultType="attendance_history">
		SELECT * 
		FROM attendance_history_tb aht 
		WHERE aht.idx_employee = #{param1} and aht.ah_date = CURDATE()
	</select>
	<!-- 직원 오늘의 출근 삽입 -->
	<insert id="gotoWorkTimeCheck">
		INSERT INTO attendance_history_tb (idx_employee, ah_check_in)
		VALUES(#{param1}, #{param2});
	</insert>
	<update id="finishWorkTimeCheck">
		UPDATE attendance_history_tb
		SET ah_check_out = #{param2}
		WHERE idx_employee = #{param1} AND ah_date = CURDATE()
	</update>
	<!-- 직원 근태 상태 변경 -->
	<update id="updateTodayCheck1">
		UPDATE attendance_history_tb
		SET ah_status = '출근'
		WHERE idx_employee = #{param1} AND ah_date = CURDATE()
	</update>
	<update id="updateTodayCheck2">
		UPDATE attendance_history_tb
		SET ah_status = '조퇴'
		WHERE idx_employee = #{param1} AND ah_date = CURDATE()
	</update>
	<update id="updateTodayCheck3">
		UPDATE attendance_history_tb
		SET ah_status = '지각'
		WHERE idx_employee = #{param1} AND ah_date = CURDATE()
	</update>
	<update id="updateTodayCheck4">
		UPDATE attendance_history_tb
		SET ah_status = '결근'
		WHERE idx_employee = #{param1} AND ah_date = CURDATE()
	</update>
	
	
	<!-- 직원 연차 -->
	<select id="getAnnualLeave" resultType="Integer">
		SELECT leave_days FROM leave_accruals_tb WHERE idx_employee = #{param1}
	</select>
	<!-- 직원 연차 테이블 -->
	<select id="getempLeaveData" resultType="leave_accruals">
		SELECT * FROM leave_accruals_tb WHERE idx_employee = #{param1}
	</select>
	<!-- 직원 연차 히스토리 -->
	<select id="getempLeaveHistory" resultType="leave_usage">
		SELECT * 
		FROM leave_usage_tb 
		WHERE idx_employee = #{param1}
		ORDER BY lu_start_date DESC;
	</select>
	
	
	
	
	<!-- 바코드 생성할 제품명 불러오기 -->
	<select id="getProductList" resultType="String">
		SELECT pt.product_name 
		FROM product_tb pt 
		WHERE is_barcode = 'n'
	</select>
	<select id="getProducts" resultType="product">
		SELECT pt.idx_product, pt.product_name
		FROM product_tb pt 
		WHERE is_barcode = 'n'
	</select>
	<!-- 바코드 생성한 제품은 is_barcode 변경 -->
	<update id="updateBarcode">
		UPDATE product_tb
		SET is_barcode = 'y'
		WHERE idx_product = #{param1}
	</update>
	
	
	
	<!-- 알람 개수 -->
	<select id="alarmCnt" resultType="Integer">
		SELECT COUNT(*) 
		FROM alerm_tb al
		WHERE idx_employee = #{param1} AND is_checked =0
	</select>
	<!-- 알람 -->
	<select id="getAlamList" resultType="alarm">
		SELECT al.idx_alarm ,
				al.al_content ,
				al.create_datetime ,
				al.is_checked ,
				al.al_path,
				al.idx_employee
		FROM alerm_tb al
		WHERE idx_employee = #{param1} AND is_checked =0
		ORDER BY al.idx_alarm DESC
	</select>
	<!-- 알림 읽기 -->
	<update id="alarmRead">
		UPDATE alerm_tb
		SET is_checked = 1
		WHERE idx_employee = #{param2} AND idx_alarm = #{param1}
	</update>
	
	
	
	
	<!-- 연차 내역 (페이지 로드시) -->
	<select id="getempLeaveHistory2" resultType="leave_usage">
		SELECT lut.idx_employee,
				lut.lu_usage_days,
				lut.lu_start_date,
				lut.lu_end_date
		FROM leave_usage_tb lut 
		JOIN employee_tb et ON lut.idx_employee = et.idx_employee 
		WHERE lut.idx_employee = #{param1}
	    ORDER BY lu_start_date DESC
	    LIMIT 0, 13
	</select>
	<!-- 연차 내역 페이지 카운트(페이지 로드시) -->
	<select id="getFilterTotalPages2" resultType="Integer">
		SELECT CEIL(COUNT(*) / 13)
		FROM leave_usage_tb lut 
		JOIN employee_tb et ON lut.idx_employee = et.idx_employee 
		WHERE lut.idx_employee = #{idxEmployee}
	</select>
	<!-- 연차 페이징 -->
	<select id="getFilterTotalPages" resultType="Integer">
		SELECT CEIL(COUNT(*) / 13)
		FROM leave_usage_tb lut 
		JOIN employee_tb et ON lut.idx_employee = et.idx_employee 
		WHERE 1=1
		    <if test="paging.year != null">
		    	AND YEAR(lut.lu_start_date) = #{paging.year}
		    </if>
		    <if test="paging.endDate != null and !paging.endDate.equals('')">
		    	AND STR_TO_DATE(CONCAT(#{paging.endDate}, '23:59:59.999'), '%Y-%m-%d %T.%f') &gt;= lut.lu_end_date
		    </if>			
		    <choose>
			    <when test="paging.filter != null and paging.filter.equals('pending')">
			    	AND at.idx_approval IN (SELECT idx_approval FROM approval_line_tb WHERE idx_employee = #{idxEmployee} and is_approval = -1)  
			    </when>
			    <when test="paging.filter != null and paging.filter.equals('rejected')">
			    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '반려'
			    </when>
			    <when test="paging.filter != null and paging.filter.equals('approved')">
			    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '승인'
			    </when>
			    <when test="paging.filter != null and paging.filter.equals('retracted')">
			    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '회수'
			    </when>			    
			    <otherwise>
			    	AND lut.idx_employee = #{idxEmployee}
			    </otherwise>
		    </choose>
	</select>
	<!-- 연차 리스트 -->
	<select id="fetchFilterList" resultType="leave_usage">
		SELECT lut.idx_employee,
				lut.lu_usage_days,
				lut.lu_start_date,
				lut.lu_end_date
		FROM leave_usage_tb lut 
		JOIN employee_tb et ON lut.idx_employee = et.idx_employee 
		WHERE 1=1
		    <if test="paging.year != null">
		    	AND YEAR(lut.lu_start_date) = #{paging.year}
		    </if>
		    <if test="paging.endDate != null and !paging.endDate.equals('')">
		    	AND STR_TO_DATE(CONCAT(#{paging.endDate}, '23:59:59.999'), '%Y-%m-%d %T.%f') &gt;= at.written_datetime
		    </if>			
		    <choose>
			    <when test="paging.filter != null and paging.filter.equals('pending')">
			    	AND at.idx_approval IN (SELECT idx_approval FROM approval_line_tb WHERE idx_employee = #{idxEmployee} and is_approval = -1)  
			    </when>
			    <when test="paging.filter != null and paging.filter.equals('rejected')">
			    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '반려'
			    </when>
			    <when test="paging.filter != null and paging.filter.equals('approved')">
			    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '승인'
			    </when>
			    <when test="paging.filter != null and paging.filter.equals('retracted')">
			    	AND at.idx_employee = #{idxEmployee} AND at.final_ap_status = '회수'
			    </when>			    
			    <otherwise>
			    	AND lut.idx_employee = #{idxEmployee}
			    </otherwise>
		    </choose>
	    ORDER BY lu_start_date DESC
	    LIMIT #{paging.page}, 13
	</select>
	
	
	
	<!-- 매출 그래프 관련,, -->
	<select id="getMonthSalesPrice" resultType="salesPrice">
		SELECT
		    COALESCE((SELECT SUM(pot.total_price)
		     FROM purchase_order_tb pot 
		     WHERE YEAR(pot.written_datetime) = #{param1}
		     AND MONTH(pot.written_datetime) = #{param2}), 0) AS poPriceList,
		    
		    COALESCE((SELECT SUM(subquery.order_total_price)
		     FROM (
		        SELECT 
		            ot.order_no,
		            dt.delivery_datetime,
		            ct.client_name,
		            pt.product_name,
		            ot.quantity,
		            pt.unit_price,
		            (SELECT SUM(ot2.quantity * pt2.unit_price)
		             FROM order_tb ot2
		             JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		             WHERE ot2.order_no = ot.order_no) AS order_total_price,
		            dt.delivery_state	
		        FROM 
		            delivery_tb dt
		            JOIN order_tb ot ON dt.idx_order = ot.idx_order 
		            JOIN client_tb ct ON ot.idx_business = ct.idx_business 
		            JOIN product_tb pt ON ot.idx_product = pt.idx_product
		        WHERE 
		            YEAR(dt.delivery_datetime) = #{param1}
		            AND MONTH(dt.delivery_datetime) = #{param2}
		    ) AS subquery), 0) AS salePriceList,
		    
		    COALESCE(
		        COALESCE((SELECT SUM(subquery.order_total_price)
		          FROM (
		             SELECT 
		                 ot.order_no,
		                 dt.delivery_datetime,
		                 ct.client_name,
		                 pt.product_name,
		                 ot.quantity,
		                 pt.unit_price,
		                 (SELECT SUM(ot2.quantity * pt2.unit_price)
		                  FROM order_tb ot2
		                  JOIN product_tb pt2 ON ot2.idx_product = pt2.idx_product
		                  WHERE ot2.order_no = ot.order_no) AS order_total_price,
		                 dt.delivery_state	
		             FROM 
		                 delivery_tb dt
		                 JOIN order_tb ot ON dt.idx_order = ot.idx_order 
		                 JOIN client_tb ct ON ot.idx_business = ct.idx_business 
		                 JOIN product_tb pt ON ot.idx_product = pt.idx_product
		             WHERE 
		                 YEAR(dt.delivery_datetime) = #{param1}
		                 AND MONTH(dt.delivery_datetime) = #{param2}
		         ) AS subquery), 0)
		        -
		        COALESCE((SELECT SUM(pot.total_price)
		          FROM purchase_order_tb pot 
		          WHERE YEAR(pot.written_datetime) = #{param1} 
		          AND MONTH(pot.written_datetime) = #{param2}), 0), 0) AS profitPriceList
	</select>
	
</mapper>